#-----------------------------------------------------------------------------
# Header Placeholder
#
#
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# Builtin None Type
#-----------------------------------------------------------------------------

# The builtin `None` type. Denoted by the literal `None`.
#
# This is a singleton value. Nothing can be cast to `None`, and `None` cannot
# be cast to anything else. The only possible operations with `None` are the 
# operators `==` and `!=`. The `None` type may be used with `or` types.
type None: 

	# Equality comparison. The `==` operator.
	def __eq__[T](other: T) -> Bool: ...

	# Equality comparison. The `!=` operator.
	def __ne__[T](other: T) -> Bool: ...


#-----------------------------------------------------------------------------
# Builtin Boolean Type
#-----------------------------------------------------------------------------

# The builtin `Bool` type. Denoted by the literals `true` and `false`.
type Bool: 
	# Bool Conversion
	def __as__[Bool]() -> Bool: ...

	# Equality comparison. The `==` operator.
	def __eq__(other: Bool) -> Bool: ...

	# Equality comparison. The `!=` operator.
	def __ne__(other: Bool) -> Bool: ...


#-----------------------------------------------------------------------------
# Builtin Byte Type
#-----------------------------------------------------------------------------

# The builtin `Byte` type. Consumes a single 8-bit byte of memory.
type Byte:
	# Byte Conversion
	def __as__[Byte]() -> Byte: ...

	# Unsigned Type Conversions
	def __as__[Uint8]() -> Uint8: ...
	def __as__[Uint16]() -> Uint16: ...
	def __as__[Uint32]() -> Uint32: ...
	def __as__[Uint64]() -> Uint64: ...
	def __as__[Uint128]() -> Uint128: ...

	# Signed Type Conversions
	def __as__[Int8]() -> Int8: ...
	def __as__[Int16]() -> Int16: ...
	def __as__[Int32]() -> Int32: ...
	def __as__[Int64]() -> Int64: ...
	def __as__[Int128]() -> Int128: ...

	# Float Type Conversions
	def __as__[Float32]() -> Float32: ...
	def __as__[Float64]() -> Float64: ...
	def __as__[Float128]() -> Float128: ...

	# Complex Type Conversions
	def __as__[Complex64]() -> Complex64: ...
	def __as__[Complex128]() -> Complex128: ...
	def __as__[Complex256]() -> Complex256: ...
	
	# Bitwise left shift. The `<<` operator.
	def __lshift__(n: Uint8) -> Byte: ...

	# Bitwise right shift. The `>>` operator.
	def __rshift__(n: Uint8) -> Byte: ...

	# Bitwise `and`. The `&` operator.
	def __and__(other: Byte) -> Byte: ...

	# Bitwise `or`. The `|` operator.
	def __or__(other: Byte) -> Byte: ...

	# Bitwise `xor`. The `^` operator.
	def __xor__(other: Byte) -> Byte: ...

	# Bitwise `not`. The `~` operator.
	def __not__(): -> Byte: ...

	# Equality comparisons. The `==` operator.
	def __eq__(other: Byte) -> Bool: ...
	
	# Equality comparison. The `!=` operator.
	def __ne__(other: Byte) -> Bool: ...


# ----------------------------------------------------------------------------
# Builtin Number Types
#-----------------------------------------------------------------------------

# Unsigned 8-bit integer
type Uint8: 
	# Byte Conversion
	def __as__[Byte]() -> Byte: ...

	# Unsigned Type Conversions
	def __as__[Uint8]() -> Uint8: ...
	def __as__[Uint16]() -> Uint16: ...
	def __as__[Uint32]() -> Uint32: ...
	def __as__[Uint64]() -> Uint64: ...
	def __as__[Uint128]() -> Uint128: ...

	# Signed Type Conversions
	def __as__[Int8]() -> Int8: ...
	def __as__[Int16]() -> Int16: ...
	def __as__[Int32]() -> Int32: ...
	def __as__[Int64]() -> Int64: ...
	def __as__[Int128]() -> Int128: ...

	# Float Type Conversions
	def __as__[Float32]() -> Float32: ...
	def __as__[Float64]() -> Float64: ...
	def __as__[Float128]() -> Float128: ...

	# Complex Type Conversions
	def __as__[Complex64]() -> Complex64: ...
	def __as__[Complex128]() -> Complex128: ...
	def __as__[Complex256]() -> Complex256: ...
	
	# Bitwise left shift. The `<<` operator.
	def __lshift__(n: Uint8) -> Uint8: ...

	# Bitwise right shift. The `>>` operator.
	def __rshift__(n: Uint8) -> Uint8: ...

	# Bitwise `and`. The `&` operator.
	def __and__(other: Uint8) -> Uint8: ...

	# Bitwise `or`. The `|` operator.
	def __or__(other: Uint8) -> Uint8: ...

	# Bitwise `xor`. The `^` operator.
	def __xor__(other: Uint8) -> Uint8: ...

	# Bitwise `not`. The `~` operator.
	def __not__(): -> Uint8: ...

	# Equality comparisons. The `==` operator.
	def __eq__(other: Uint8) -> Bool: ...
	
	# Equality comparison. The `!=` operator.
	def __ne__(other: Uint8) -> Bool: ...

	# Less-than comparison. The `<` operator.
	def __lt__(other: Uint8) -> Bool: ...

	# Greater-than comparison. The `>` operator.
	def __gt__(other: Uint8) -> Bool: ...

	# Less-than-or-equal comparison. The `<=` operator.
	def __le__(other: Uint8) -> Bool: ...

	# Greater-than-or-equal comparison. The `>=` operator.
	def __ge__(other: Uint8) -> Bool: ...

	# Addition. The `+` operator.
	def __add__(other: Uint8) -> Uint8: ...

	# Subtraction. The `-` operator.
	def __sub__(other: Uint8) -> Uint8: ...

	# Multiplication. The `*` operator.
	def __mul__(other: Uint8) -> Uint8: ...

	# Division. The `/` operator.
	def __div__(other: Uint8) -> Uint8: ...

	# Modulus. The `%` operator.
	def __mod__(other: Uint8) -> Uint8: ...


# Unsigned 16-bit integer
type Uint16: 
	# Byte Conversion
	def __as__[Byte]() -> Byte: ...

	# Unsigned Type Conversions
	def __as__[Uint8]() -> Uint8: ...
	def __as__[Uint16]() -> Uint16: ...
	def __as__[Uint32]() -> Uint32: ...
	def __as__[Uint64]() -> Uint64: ...
	def __as__[Uint128]() -> Uint128: ...

	# Signed Type Conversions
	def __as__[Int8]() -> Int8: ...
	def __as__[Int16]() -> Int16: ...
	def __as__[Int32]() -> Int32: ...
	def __as__[Int64]() -> Int64: ...
	def __as__[Int128]() -> Int128: ...
	
	# Float Type Conversions
	def __as__[Float32]() -> Float32: ...
	def __as__[Float64]() -> Float64: ...
	def __as__[Float128]() -> Float128: ...

	# Complex Type Conversions
	def __as__[Complex64]() -> Complex64: ...
	def __as__[Complex128]() -> Complex128: ...
	def __as__[Complex256]() -> Complex256: ...
	
	# Bitwise left shift. The `<<` operator.
	def __lshift__(n: Uint8) -> Uint16: ...

	# Bitwise right shift. The `>>` operator.
	def __rshift__(n: Uint8) -> Uint16: ...

	# Bitwise `and`. The `&` operator.
	def __and__(other: Uint16) -> Uint16: ...

	# Bitwise `or`. The `|` operator.
	def __or__(other: Uint16) -> Uint16: ...

	# Bitwise `xor`. The `^` operator.
	def __xor__(other: Uint16) -> Uint16: ...

	# Bitwise `not`. The `~` operator.
	def __not__(): -> Uint16: ...

	# Equality comparisons. The `==` operator.
	def __eq__(other: Uint16) -> Bool: ...
	
	# Equality comparison. The `!=` operator.
	def __ne__(other: Uint16) -> Bool: ...

	# Less-than comparison. The `<` operator.
	def __lt__(other: Uint16) -> Bool: ...

	# Greater-than comparison. The `>` operator.
	def __gt__(other: Uint16) -> Bool: ...

	# Less-than-or-equal comparison. The `<=` operator.
	def __le__(other: Uint16) -> Bool: ...

	# Greater-than-or-equal comparison. The `>=` operator.
	def __ge__(other: Uint16) -> Bool: ...

	# Addition. The `+` operator.
	def __add__(other: Uint16) -> Uint16: ...

	# Subtraction. The `-` operator.
	def __sub__(other: Uint16) -> Uint16: ...

	# Multiplication. The `*` operator.
	def __mul__(other: Uint16) -> Uint16: ...

	# Division. The `/` operator.
	def __div__(other: Uint16) -> Uint16: ...

	# Modulus. The `%` operator.
	def __mod__(other: Uint16) -> Uint16: ...


# Unsigned 32-bit integer
type Uint32: 
	# Byte Conversion
	def __as__[Byte]() -> Byte: ...

	# Unsigned Type Conversions
	def __as__[Uint8]() -> Uint8: ...
	def __as__[Uint16]() -> Uint16: ...
	def __as__[Uint32]() -> Uint32: ...
	def __as__[Uint64]() -> Uint64: ...
	def __as__[Uint128]() -> Uint128: ...

	# Signed Type Conversions
	def __as__[Int8]() -> Int8: ...
	def __as__[Int16]() -> Int16: ...
	def __as__[Int32]() -> Int32: ...
	def __as__[Int64]() -> Int64: ...
	def __as__[Int128]() -> Int128: ...
	
	# Float Type Conversions
	def __as__[Float32]() -> Float32: ...
	def __as__[Float64]() -> Float64: ...
	def __as__[Float128]() -> Float128: ...

	# Complex Type Conversions
	def __as__[Complex64]() -> Complex64: ...
	def __as__[Complex128]() -> Complex128: ...
	def __as__[Complex256]() -> Complex256: ...
	
	# Bitwise left shift. The `<<` operator.
	def __lshift__(n: Uint8) -> Uint32: ...

	# Bitwise right shift. The `>>` operator.
	def __rshift__(n: Uint8) -> Uint32: ...

	# Bitwise `and`. The `&` operator.
	def __and__(other: Uint32) -> Uint32: ...

	# Bitwise `or`. The `|` operator.
	def __or__(other: Uint32) -> Uint32: ...

	# Bitwise `xor`. The `^` operator.
	def __xor__(other: Uint32) -> Uint32: ...

	# Bitwise `not`. The `~` operator.
	def __not__(): -> Uint32: ...

	# Equality comparisons. The `==` operator.
	def __eq__(other: Uint32) -> Bool: ...
	
	# Equality comparison. The `!=` operator.
	def __ne__(other: Uint32) -> Bool: ...

	# Less-than comparison. The `<` operator.
	def __lt__(other: Uint32) -> Bool: ...

	# Greater-than comparison. The `>` operator.
	def __gt__(other: Uint32) -> Bool: ...

	# Less-than-or-equal comparison. The `<=` operator.
	def __le__(other: Uint32) -> Bool: ...

	# Greater-than-or-equal comparison. The `>=` operator.
	def __ge__(other: Uint32) -> Bool: ...

	# Addition. The `+` operator.
	def __add__(other: Uint32) -> Uint32: ...

	# Subtraction. The `-` operator.
	def __sub__(other: Uint32) -> Uint32: ...

	# Multiplication. The `*` operator.
	def __mul__(other: Uint32) -> Uint32: ...

	# Division. The `/` operator.
	def __div__(other: Uint32) -> Uint32: ...

	# Modulus. The `%` operator.
	def __mod__(other: Uint32) -> Uint32: ...


# Unsigned 64-bit integer
type Uint64: 
	# Byte Conversion
	def __as__[Byte]() -> Byte: ...

	# Unsigned Type Conversions
	def __as__[Uint8]() -> Uint8: ...
	def __as__[Uint16]() -> Uint16: ...
	def __as__[Uint32]() -> Uint32: ...
	def __as__[Uint64]() -> Uint64: ...
	def __as__[Uint128]() -> Uint128: ...

	# Signed Type Conversions
	def __as__[Int8]() -> Int8: ...
	def __as__[Int16]() -> Int16: ...
	def __as__[Int32]() -> Int32: ...
	def __as__[Int64]() -> Int64: ...
	def __as__[Int128]() -> Int128: ...
	
	# Float Type Conversions
	def __as__[Float32]() -> Float32: ...
	def __as__[Float64]() -> Float64: ...	
	def __as__[Float128]() -> Float128: ...

	# Complex Type Conversions
	def __as__[Complex64]() -> Complex64: ...
	def __as__[Complex128]() -> Complex128: ...
	def __as__[Complex256]() -> Complex256: ...
	
	# Bitwise left shift. The `<<` operator.
	def __lshift__(n: Uint8) -> Uint64: ...

	# Bitwise right shift. The `>>` operator.
	def __rshift__(n: Uint8) -> Uint64: ...

	# Bitwise `and`. The `&` operator.
	def __and__(other: Uint64) -> Uint64: ...

	# Bitwise `or`. The `|` operator.
	def __or__(other: Uint64) -> Uint64: ...

	# Bitwise `xor`. The `^` operator.
	def __xor__(other: Uint64) -> Uint64: ...

	# Bitwise `not`. The `~` operator.
	def __not__(): -> Uint64: ...

	# Equality comparisons. The `==` operator.
	def __eq__(other: Uint64) -> Bool: ...
	
	# Equality comparison. The `!=` operator.
	def __ne__(other: Uint64) -> Bool: ...

	# Less-than comparison. The `<` operator.
	def __lt__(other: Uint64) -> Bool: ...

	# Greater-than comparison. The `>` operator.
	def __gt__(other: Uint64) -> Bool: ...

	# Less-than-or-equal comparison. The `<=` operator.
	def __le__(other: Uint64) -> Bool: ...

	# Greater-than-or-equal comparison. The `>=` operator.
	def __ge__(other: Uint64) -> Bool: ...

	# Addition. The `+` operator.
	def __add__(other: Uint64) -> Uint64: ...

	# Subtraction. The `-` operator.
	def __sub__(other: Uint64) -> Uint64: ...

	# Multiplication. The `*` operator.
	def __mul__(other: Uint64) -> Uint64: ...

	# Division. The `/` operator.
	def __div__(other: Uint64) -> Uint64: ...

	# Modulus. The `%` operator.
	def __mod__(other: Uint64) -> Uint64: ...


# Unsigned 128-bit integer
type Uint128: 
	# Byte Conversion
	def __as__[Byte]() -> Byte: ...

	# Unsigned Type Conversions
	def __as__[Uint8]() -> Uint8: ...
	def __as__[Uint16]() -> Uint16: ...
	def __as__[Uint32]() -> Uint32: ...
	def __as__[Uint64]() -> Uint64: ...
	def __as__[Uint128]() -> Uint128: ...

	# Signed Type Conversions
	def __as__[Int8]() -> Int8: ...
	def __as__[Int16]() -> Int16: ...
	def __as__[Int32]() -> Int32: ...
	def __as__[Int64]() -> Int64: ...
	def __as__[Int128]() -> Int128: ...
	
	# Float Type Conversions
	def __as__[Float32]() -> Float32: ...
	def __as__[Float64]() -> Float64: ...
	def __as__[Float128]() -> Float128: ...

	# Complex Type Conversions
	def __as__[Complex64]() -> Complex64: ...
	def __as__[Complex128]() -> Complex128: ...
	def __as__[Complex256]() -> Complex256: ...
	
	# Bitwise left shift. The `<<` operator.
	def __lshift__(n: Uint8) -> Uint128: ...

	# Bitwise right shift. The `>>` operator.
	def __rshift__(n: Uint8) -> Uint128: ...

	# Bitwise `and`. The `&` operator.
	def __and__(other: Uint128) -> Uint128: ...

	# Bitwise `or`. The `|` operator.
	def __or__(other: Uint128) -> Uint128: ...

	# Bitwise `xor`. The `^` operator.
	def __xor__(other: Uint128) -> Uint128: ...

	# Bitwise `not`. The `~` operator.
	def __not__(): -> Uint128: ...

	# Equality comparisons. The `==` operator.
	def __eq__(other: Uint128) -> Bool: ...
	
	# Equality comparison. The `!=` operator.
	def __ne__(other: Uint128) -> Bool: ...

	# Less-than comparison. The `<` operator.
	def __lt__(other: Uint128) -> Bool: ...

	# Greater-than comparison. The `>` operator.
	def __gt__(other: Uint128) -> Bool: ...

	# Less-than-or-equal comparison. The `<=` operator.
	def __le__(other: Uint128) -> Bool: ...

	# Greater-than-or-equal comparison. The `>=` operator.
	def __ge__(other: Uint128) -> Bool: ...

	# Addition. The `+` operator.
	def __add__(other: Uint128) -> Uint128: ...

	# Subtraction. The `-` operator.
	def __sub__(other: Uint128) -> Uint128: ...

	# Multiplication. The `*` operator.
	def __mul__(other: Uint128) -> Uint128: ...

	# Division. The `/` operator.
	def __div__(other: Uint128) -> Uint128: ...

	# Modulus. The `%` operator.
	def __mod__(other: Uint128) -> Uint128: ...


# Signed 8-bit integer
type Int8:
	# Byte Conversion
	def __as__[Byte]() -> Byte: ...

	# Unsigned Type Conversions
	def __as__[Uint8]() -> Uint8: ...
	def __as__[Uint16]() -> Uint16: ...
	def __as__[Uint32]() -> Uint32: ...
	def __as__[Uint64]() -> Uint64: ...
	def __as__[Uint128]() -> Uint128: ...

	# Signed Type Conversions
	def __as__[Int8]() -> Int8: ...
	def __as__[Int16]() -> Int16: ...
	def __as__[Int32]() -> Int32: ...
	def __as__[Int64]() -> Int64: ...
	def __as__[Int128]() -> Int128: ...
	
	# Float Type Conversions
	def __as__[Float32]() -> Float32: ...
	def __as__[Float64]() -> Float64: ...
	def __as__[Float128]() -> Float128: ...

	# Complex Type Conversions
	def __as__[Complex64]() -> Complex64: ...
	def __as__[Complex128]() -> Complex128: ...
	def __as__[Complex256]() -> Complex256: ...

	# Equality comparisons. The `==` operator.
	def __eq__(other: Int8) -> Bool: ...
	
	# Equality comparison. The `!=` operator.
	def __ne__(other: Int8) -> Bool: ...

	# Less-than comparison. The `<` operator.
	def __lt__(other: Int8) -> Bool: ...

	# Greater-than comparison. The `>` operator.
	def __gt__(other: Int8) -> Bool: ...

	# Less-than-or-equal comparison. The `<=` operator.
	def __le__(other: Int8) -> Bool: ...

	# Greater-than-or-equal comparison. The `>=` operator.
	def __ge__(other: Int8) -> Bool: ...

	# Addition. The `+` operator.
	def __add__(other: Int8) -> Int8: ...

	# Subtraction. The `-` operator.
	def __sub__(other: Int8) -> Int8: ...

	# Multiplication. The `*` operator.
	def __mul__(other: Int8) -> Int8: ...

	# Division. The `/` operator.
	def __div__(other: Int8) -> Int8: ...

	# Modulus. The `%` operator.
	def __mod__(other: Int8) -> Int8: ...


# Signed 16-bit integer
type Int16:
	# Byte Conversion
	def __as__[Byte]() -> Byte: ...

	# Unsigned Type Conversions
	def __as__[Uint8]() -> Uint8: ...
	def __as__[Uint16]() -> Uint16: ...
	def __as__[Uint32]() -> Uint32: ...
	def __as__[Uint64]() -> Uint64: ...
	def __as__[Uint128]() -> Uint128: ...

	# Signed Type Conversions
	def __as__[Int8]() -> Int8: ...
	def __as__[Int16]() -> Int16: ...
	def __as__[Int32]() -> Int32: ...
	def __as__[Int64]() -> Int64: ...
	def __as__[Int128]() -> Int128: ...
	
	# Float Type Conversions
	def __as__[Float32]() -> Float32: ...
	def __as__[Float64]() -> Float64: ...
	def __as__[Float128]() -> Float128: ...

	# Complex Type Conversions
	def __as__[Complex64]() -> Complex64: ...
	def __as__[Complex128]() -> Complex128: ...
	def __as__[Complex256]() -> Complex256: ...

	# Equality comparisons. The `==` operator.
	def __eq__(other: Int16) -> Bool: ...
	
	# Equality comparison. The `!=` operator.
	def __ne__(other: Int16) -> Bool: ...

	# Less-than comparison. The `<` operator.
	def __lt__(other: Int16) -> Bool: ...

	# Greater-than comparison. The `>` operator.
	def __gt__(other: Int16) -> Bool: ...

	# Less-than-or-equal comparison. The `<=` operator.
	def __le__(other: Int16) -> Bool: ...

	# Greater-than-or-equal comparison. The `>=` operator.
	def __ge__(other: Int16) -> Bool: ...

	# Addition. The `+` operator.
	def __add__(other: Int16) -> Int16: ...

	# Subtraction. The `-` operator.
	def __sub__(other: Int16) -> Int16: ...

	# Multiplication. The `*` operator.
	def __mul__(other: Int16) -> Int16: ...

	# Division. The `/` operator.
	def __div__(other: Int16) -> Int16: ...

	# Modulus. The `%` operator.
	def __mod__(other: Int16) -> Int16: ...


# Signed 32-bit integer
type Int32:
	# Byte Conversion
	def __as__[Byte]() -> Byte: ...

	# Unsigned Type Conversions
	def __as__[Uint8]() -> Uint8: ...
	def __as__[Uint16]() -> Uint16: ...
	def __as__[Uint32]() -> Uint32: ...
	def __as__[Uint64]() -> Uint64: ...
	def __as__[Uint128]() -> Uint128: ...

	# Signed Type Conversions
	def __as__[Int8]() -> Int8: ...
	def __as__[Int16]() -> Int16: ...
	def __as__[Int32]() -> Int32: ...
	def __as__[Int64]() -> Int64: ...
	def __as__[Int128]() -> Int128: ...
	
	# Float Type Conversions
	def __as__[Float32]() -> Float32: ...
	def __as__[Float64]() -> Float64: ...
	def __as__[Float128]() -> Float128: ...

	# Complex Type Conversions
	def __as__[Complex64]() -> Complex64: ...
	def __as__[Complex128]() -> Complex128: ...
	def __as__[Complex256]() -> Complex256: ...

	# Equality comparisons. The `==` operator.
	def __eq__(other: Int32) -> Bool: ...
	
	# Equality comparison. The `!=` operator.
	def __ne__(other: Int32) -> Bool: ...

	# Less-than comparison. The `<` operator.
	def __lt__(other: Int32) -> Bool: ...

	# Greater-than comparison. The `>` operator.
	def __gt__(other: Int32) -> Bool: ...

	# Less-than-or-equal comparison. The `<=` operator.
	def __le__(other: Int32) -> Bool: ...

	# Greater-than-or-equal comparison. The `>=` operator.
	def __ge__(other: Int32) -> Bool: ...

	# Addition. The `+` operator.
	def __add__(other: Int32) -> Int32: ...

	# Subtraction. The `-` operator.
	def __sub__(other: Int32) -> Int32: ...

	# Multiplication. The `*` operator.
	def __mul__(other: Int32) -> Int32: ...

	# Division. The `/` operator.
	def __div__(other: Int32) -> Int32: ...

	# Modulus. The `%` operator.
	def __mod__(other: Int32) -> Int32: ...


# Signed 64-bit integer
type Int64:
	# Byte Conversion
	def __as__[Byte]() -> Byte: ...

	# Unsigned Type Conversions
	def __as__[Uint8]() -> Uint8: ...
	def __as__[Uint16]() -> Uint16: ...
	def __as__[Uint32]() -> Uint32: ...
	def __as__[Uint64]() -> Uint64: ...
	def __as__[Uint128]() -> Uint128: ...

	# Signed Type Conversions
	def __as__[Int8]() -> Int8: ...
	def __as__[Int16]() -> Int16: ...
	def __as__[Int32]() -> Int32: ...
	def __as__[Int64]() -> Int64: ...
	def __as__[Int128]() -> Int128: ...
	
	# Float Type Conversions
	def __as__[Float32]() -> Float32: ...
	def __as__[Float64]() -> Float64: ...
	def __as__[Float128]() -> Float128: ...

	# Complex Type Conversions
	def __as__[Complex64]() -> Complex64: ...
	def __as__[Complex128]() -> Complex128: ...
	def __as__[Complex256]() -> Complex256: ...

	# Equality comparisons. The `==` operator.
	def __eq__(other: Int64) -> Bool: ...
	
	# Equality comparison. The `!=` operator.
	def __ne__(other: Int64) -> Bool: ...

	# Less-than comparison. The `<` operator.
	def __lt__(other: Int64) -> Bool: ...

	# Greater-than comparison. The `>` operator.
	def __gt__(other: Int64) -> Bool: ...

	# Less-than-or-equal comparison. The `<=` operator.
	def __le__(other: Int64) -> Bool: ...

	# Greater-than-or-equal comparison. The `>=` operator.
	def __ge__(other: Int64) -> Bool: ...

	# Addition. The `+` operator.
	def __add__(other: Int64) -> Int64: ...

	# Subtraction. The `-` operator.
	def __sub__(other: Int64) -> Int64: ...

	# Multiplication. The `*` operator.
	def __mul__(other: Int64) -> Int64: ...

	# Division. The `/` operator.
	def __div__(other: Int64) -> Int64: ...

	# Modulus. The `%` operator.
	def __mod__(other: Int64) -> Int64: ...


# Signed 128-bit integer
type Int128:
	# Byte Conversion
	def __as__[Byte]() -> Byte: ...

	# Unsigned Type Conversions
	def __as__[Uint8]() -> Uint8: ...
	def __as__[Uint16]() -> Uint16: ...
	def __as__[Uint32]() -> Uint32: ...
	def __as__[Uint64]() -> Uint64: ...
	def __as__[Uint128]() -> Uint128: ...

	# Signed Type Conversions
	def __as__[Int8]() -> Int8: ...
	def __as__[Int16]() -> Int16: ...
	def __as__[Int32]() -> Int32: ...
	def __as__[Int64]() -> Int64: ...
	def __as__[Int128]() -> Int128: ...
	
	# Float Type Conversions
	def __as__[Float32]() -> Float32: ...
	def __as__[Float64]() -> Float64: ...
	def __as__[Float128]() -> Float128: ...

	# Complex Type Conversions
	def __as__[Complex64]() -> Complex64: ...
	def __as__[Complex128]() -> Complex128: ...
	def __as__[Complex256]() -> Complex256: ...

	# Equality comparisons. The `==` operator.
	def __eq__(other: Int128) -> Bool: ...
	
	# Equality comparison. The `!=` operator.
	def __ne__(other: Int128) -> Bool: ...

	# Less-than comparison. The `<` operator.
	def __lt__(other: Int128) -> Bool: ...

	# Greater-than comparison. The `>` operator.
	def __gt__(other: Int128) -> Bool: ...

	# Less-than-or-equal comparison. The `<=` operator.
	def __le__(other: Int128) -> Bool: ...

	# Greater-than-or-equal comparison. The `>=` operator.
	def __ge__(other: Int128) -> Bool: ...

	# Addition. The `+` operator.
	def __add__(other: Int128) -> Int128: ...

	# Subtraction. The `-` operator.
	def __sub__(other: Int128) -> Int128: ...

	# Multiplication. The `*` operator.
	def __mul__(other: Int128) -> Int128: ...

	# Division. The `/` operator.
	def __div__(other: Int128) -> Int128: ...

	# Modulus. The `%` operator.
	def __mod__(other: Int128) -> Int128: ...


# IEE-754 32bit floating point
type Float32:
	# Byte Conversion
	def __as__[Byte]() -> Byte: ...

	# Unsigned Type Conversions
	def __as__[Uint8]() -> Uint8: ...
	def __as__[Uint16]() -> Uint16: ...
	def __as__[Uint32]() -> Uint32: ...
	def __as__[Uint64]() -> Uint64: ...
	def __as__[Uint128]() -> Uint128: ...

	# Signed Type Conversions
	def __as__[Int8]() -> Int8: ...
	def __as__[Int16]() -> Int16: ...
	def __as__[Int32]() -> Int32: ...
	def __as__[Int64]() -> Int64: ...
	def __as__[Int128]() -> Int128: ...
	
	# Float Type Conversions
	def __as__[Float32]() -> Float32: ...
	def __as__[Float64]() -> Float64: ...
	def __as__[Float128]() -> Float128: ...

	# Complex Type Conversions
	def __as__[Complex64]() -> Complex64: ...
	def __as__[Complex128]() -> Complex128: ...
	def __as__[Complex256]() -> Complex256: ...

	# Equality comparisons. The `==` operator.
	def __eq__(other: Float32) -> Bool: ...
	
	# Equality comparison. The `!=` operator.
	def __ne__(other: Float32) -> Bool: ...

	# Less-than comparison. The `<` operator.
	def __lt__(other: Float32) -> Bool: ...

	# Greater-than comparison. The `>` operator.
	def __gt__(other: Float32) -> Bool: ...

	# Less-than-or-equal comparison. The `<=` operator.
	def __le__(other: Float32) -> Bool: ...

	# Greater-than-or-equal comparison. The `>=` operator.
	def __ge__(other: Float32) -> Bool: ...

	# Addition. The `+` operator.
	def __add__(other: Float32) -> Float32: ...

	# Subtraction. The `-` operator.
	def __sub__(other: Float32) -> Float32: ...

	# Multiplication. The `*` operator.
	def __mul__(other: Float32) -> Float32: ...

	# Division. The `/` operator.
	def __div__(other: Float32) -> Float32: ...

	# Modulus. The `%` operator.
	def __mod__(other: Float32) -> Float32: ...


# IEE-754 64bit floating point
type Float64:
	# Byte Conversion
	def __as__[Byte]() -> Byte: ...

	# Unsigned Type Conversions
	def __as__[Uint8]() -> Uint8: ...
	def __as__[Uint16]() -> Uint16: ...
	def __as__[Uint32]() -> Uint32: ...
	def __as__[Uint64]() -> Uint64: ...
	def __as__[Uint128]() -> Uint128: ...

	# Signed Type Conversions
	def __as__[Int8]() -> Int8: ...
	def __as__[Int16]() -> Int16: ...
	def __as__[Int32]() -> Int32: ...
	def __as__[Int64]() -> Int64: ...
	def __as__[Int128]() -> Int128: ...
	
	# Float Type Conversions
	def __as__[Float32]() -> Float32: ...
	def __as__[Float64]() -> Float64: ...
	def __as__[Float128]() -> Float128: ...

	# Complex Type Conversions
	def __as__[Complex64]() -> Complex64: ...
	def __as__[Complex128]() -> Complex128: ...
	def __as__[Complex256]() -> Complex256: ...

	# Equality comparisons. The `==` operator.
	def __eq__(other: Uint8) -> Bool: ...
	
	# Equality comparison. The `!=` operator.
	def __ne__(other: Uint8) -> Bool: ...

	# Less-than comparison. The `<` operator.
	def __lt__(other: Uint8) -> Bool: ...

	# Greater-than comparison. The `>` operator.
	def __gt__(other: Uint8) -> Bool: ...

	# Less-than-or-equal comparison. The `<=` operator.
	def __le__(other: Uint8) -> Bool: ...

	# Greater-than-or-equal comparison. The `>=` operator.
	def __ge__(other: Uint8) -> Bool: ...

	# Addition. The `+` operator.
	def __add__(other: Uint8) -> Uint8: ...

	# Subtraction. The `-` operator.
	def __sub__(other: Uint8) -> Uint8: ...

	# Multiplication. The `*` operator.
	def __mul__(other: Uint8) -> Uint8: ...

	# Division. The `/` operator.
	def __div__(other: Uint8) -> Uint8: ...

	# Modulus. The `%` operator.
	def __mod__(other: Int128) -> Int128: ...


# IEE-754 128bit floating point
type Float128:
	# Byte Conversion
	def __as__[Byte]() -> Byte: ...

	# Unsigned Type Conversions
	def __as__[Uint8]() -> Uint8: ...
	def __as__[Uint16]() -> Uint16: ...
	def __as__[Uint32]() -> Uint32: ...
	def __as__[Uint64]() -> Uint64: ...
	def __as__[Uint128]() -> Uint128: ...

	# Signed Type Conversions
	def __as__[Int8]() -> Int8: ...
	def __as__[Int16]() -> Int16: ...
	def __as__[Int32]() -> Int32: ...
	def __as__[Int64]() -> Int64: ...
	def __as__[Int128]() -> Int128: ...
	
	# Float Type Conversions
	def __as__[Float32]() -> Float32: ...
	def __as__[Float64]() -> Float64: ...
	def __as__[Float128]() -> Float128: ...

	# Complex Type Conversions
	def __as__[Complex64]() -> Complex64: ...
	def __as__[Complex128]() -> Complex128: ...
	def __as__[Complex256]() -> Complex256: ...

	# Equality comparisons. The `==` operator.
	def __eq__(other: Uint8) -> Bool: ...
	
	# Equality comparison. The `!=` operator.
	def __ne__(other: Uint8) -> Bool: ...

	# Less-than comparison. The `<` operator.
	def __lt__(other: Uint8) -> Bool: ...

	# Greater-than comparison. The `>` operator.
	def __gt__(other: Uint8) -> Bool: ...

	# Less-than-or-equal comparison. The `<=` operator.
	def __le__(other: Uint8) -> Bool: ...

	# Greater-than-or-equal comparison. The `>=` operator.
	def __ge__(other: Uint8) -> Bool: ...

	# Addition. The `+` operator.
	def __add__(other: Uint8) -> Uint8: ...

	# Subtraction. The `-` operator.
	def __sub__(other: Uint8) -> Uint8: ...

	# Multiplication. The `*` operator.
	def __mul__(other: Uint8) -> Uint8: ...

	# Division. The `/` operator.
	def __div__(other: Uint8) -> Uint8: ...

	# Modulus. The `%` operator.
	def __mod__(other: Int128) -> Int128: ...


# 64bit complex type
type Complex64:
	
	# The real component of the complex type.
	readonly real: Float32

	# The imaginary component of the complex type.
	readonly imag: Float32

	def __init__(real: Float32, imag: Float32) -> None: ...

	# Equality comparisons. The `==` operator.
	def __eq__(other: Complex64) -> Bool: ...
	
	# Equality comparison. The `!=` operator.
	def __ne__(other: Complex64) -> Bool: ...

	# Addition. The `+` operator.
	def __add__(other: Complex64) -> Complex64: ...

	# Subtraction. The `-` operator.
	def __sub__(other: Complex64) -> Complex64: ...

	# Multiplication. The `*` operator.
	def __mul__(other: Complex64) -> Complex64: ...

	# Division. The `/` operator.
	def __div__(other: Complex64) -> Complex64: ...


# 128bit complex type
type Complex128:

	# The real component of the complex type.
	readonly real: Float64

	# The imaginary component of the complex type.
	readonly imag: Float64

	def __init__(real: Float64, imag: Float64) -> None: ...
	
	# Equality comparisons. The `==` operator.
	def __eq__(other: Complex128) -> Bool: ...
	
	# Equality comparison. The `!=` operator.
	def __ne__(other: Complex128) -> Bool: ...

	# Addition. The `+` operator.
	def __add__(other: Complex128) -> Complex128: ...

	# Subtraction. The `-` operator.
	def __sub__(other: Complex128) -> Complex128: ...

	# Multiplication. The `*` operator.
	def __mul__(other: Complex128) -> Complex128: ...

	# Division. The `/` operator.
	def __div__(other: Complex128) -> Complex128: ...


# 256bit complex type
type Complex256:
	
	# The real component of the complex type.
	readonly real: Float128

	# The imaginary component of the complex type.
	readonly imag: Float128

	def __init__(real: Float128, imag: Float128) -> None: ...

	# Equality comparisons. The `==` operator.
	def __eq__(other: Complex256) -> Bool: ...
	
	# Equality comparison. The `!=` operator.
	def __ne__(other: Complex256) -> Bool: ...

	# Addition. The `+` operator.
	def __add__(other: Complex256) -> Complex256: ...

	# Subtraction. The `-` operator.
	def __sub__(other: Complex256) -> Complex256: ...

	# Multiplication. The `*` operator.
	def __mul__(other: Complex256) -> Complex256: ...

	# Division. The `/` operator.
	def __div__(other: Complex256) -> Complex256: ...


#-----------------------------------------------------------------------------
# Memory Type
#-----------------------------------------------------------------------------

type Memory<T>:
	
	readonly size: Uint64

	readonly length: Uint32

	def __init__() -> None: ...

	def __init__(length: Uint32) -> None: ...

	def __getitem__(index: Uint32) -> T: ...

	def __setitem__(index: Uint32, value: T) -> None: ...

	def copy() -> Memory<T>: ...

	def resize(length: Uint32) -> None: ...

	def free(): -> None: ...
	
