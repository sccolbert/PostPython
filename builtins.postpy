#------------------------------------------------------------------------------
# POSTPython Builtins Module
#
#
#------------------------------------------------------------------------------

# General Thoughts:
#
# Objects declared with `type` are value types. They are always allocated on
# the stack or within the allocated space of another object. They have the
# same semantics as `C` value types in that they are passed by value and are
# structurally copied on assignment. However, they may contain "reference"
# types as members in which case only the "reference" is copied. Additionally,
# a `type` cannot be subclassed, but it may include other inline types.
#
# Objects declared with `class` are reference types. They are always allocated
# on the heap. They have the same semantics as `C` pointers in that they are
# passed by reference and assigned by reference. They may contain "value"
# types as part of their allocated structure.
#
# `self` is implicit in method bodies. This may seem to violate the rule that
# "explicit is better than implicit", but this is less typing for everyone
# and the alternative is to have the runtime "implicitly" pass `self` as the
# first argument to all methods.
#
# We will have exceptions, but only for exceptional circumstances. We will
# avoid using exceptions for control flow.
#
# Objects of `type` and `class` are nominally typed. If code expects a
# nominal type, it will only receive that nominal type. "duck-typing" one
# type to fit a nominal type is not allowed. Use `protocol` types for
# "duck-typing".
#
# A `protocol` type is any object that *structurally* meets the definition of
# a `protocol`. Think of this as "explicit" duck-typing, or an interface. This
# will necessarily be slower in-use than nominal types, due the boxing and/or
# virtualization that may be required.
#
# "Dunder" methods are used to support the language syntax and runtime. They
# are not visible outside of the runtime. This is compiler-enforced.
#
# "Leading-underscore" names are private to the nominal `type` or `class`.
# They are not visible to outside code *or* to sublcasses. Private name
# shadowing is allowed in subclasses and the types may be different.
#
# Public name shadowing is allowed in subclasses, but the type signatures
# must be consistent throughout the class hierarchy.
#
# There is not concept of "protected" or "friend" like in C++.
#
# At the module level, "Leading-underscore" names are private to the module
# and cannot be exported.
#
# Destructors will be supported, and guaranteed to be called, even with the
# presence of exceptions. This will support RAII as in C++, and eliminates
# the need for the `with` construct from Python.
#
# `readonly` attributes. Current thoughts are that they are `readonly` by
# code which "consumes" the type or class. They can be modified by the
# type or class itself, but not by subclasses. `const` attributes are constant
# and can never be changed after initialization, by anything. Note that a
# `const` attribute can decay to `readonly` to meet a protocol.
#
# Questions:
#
# - The types declared in this file are always available as "magic" builtins.
#   They do not need to be imported. Therefore, do we allow shadowing of these
#   type names by user code, or not worry about it because these types can
#   also be imported explicitly?
#
# - Implicit default constructors?
#
# - Implicit default destructor?
#
# - Syntax for lists, dicts, sets, and their underlying types? I don't like
#   the Python `list` API because it is not uniform. We have an opportunity
#   to have better APIs for the builtin syntactic types. I'm thinking that
#   the syntax should support only fixed-size objects. For example, the
#   tuple sytax is a fixed-size allocation. I'm thinking of using the "list"
#   syntax to create a mutable-but-fixed-size builtin "array" object, akin
#   to a C++ array. Variable size collections would all be libraries that are
#   implemented the "standard library", ala "Vector", "Dict", "Set", etc...
#
# - Builtin string type. Will be UTF-8, but Unicode aware?


#------------------------------------------------------------------------------
# Builtin None Type
#------------------------------------------------------------------------------

# The builtin `None` type. Denoted by the literal `None`.
#
# This is a singleton value. It cannot be constructed or coverted to/from.
#
# The only possible operation with `None` is the `is` keyword.
type None: ...


#------------------------------------------------------------------------------
# Builtin Option Type
#------------------------------------------------------------------------------

# The builtin `Option` type.
#
# An `Option` can take the form of a value of type `T` or `None`.
#
# This type is useful for handling control flow in a more performant manner
# where traditional Python exception may have been used.
#
# In general, POSTPython takes the approach that exceptions should not be used
# for control flow.
#
# For example, the `Iterator` protocol uses `Option` types instead of a
# `StopIteration` exception.
type Option[T] = T | None


#------------------------------------------------------------------------------
# Builtin Boolean Type
#------------------------------------------------------------------------------

# The builtin `Bool` type. Denoted by the literals `true` and `false`.
#
# This is a binary value. It cannot be constructed or coverted to/from.
#
# It's primary use is the test value for conditional tests.
#
# It can also be used with the `is` keyword. e.g. `if a is true: ...`.
type Bool: ...


#------------------------------------------------------------------------------
# Builtin Byte Type
#------------------------------------------------------------------------------

# The builtin `Byte` type. Consumes a single 8-bit byte of memory.
type Byte:
    # Default constructor.
    def __init__() -> None: ...

    # Copy constructor.
    def __init__(other: Byte) -> None: ...

    # Bitwise left shift. The `<<` operator.
    def __lshift__(n: Uint8) -> Byte: ...

    # Bitwise right shift. The `>>` operator.
    def __rshift__(n: Uint8) -> Byte: ...

    # Bitwise `and`. The `&` operator.
    def __and__(other: Byte) -> Byte: ...

    # Bitwise `or`. The `|` operator.
    def __or__(other: Byte) -> Byte: ...

    # Bitwise `xor`. The `^` operator.
    def __xor__(other: Byte) -> Byte: ...

    # Bitwise `not`. The `~` operator.
    def __not__(): -> Byte: ...

    # Equality comparisons. The `==` operator.
    def __eq__(other: Byte) -> Bool: ...

    # Equality comparison. The `!=` operator.
    def __ne__(other: Byte) -> Bool: ...

    # Unsigned Type Conversions
    def __convert__[Uint8]() -> Uint8: ...
    def __convert__[Uint16]() -> Uint16: ...
    def __convert__[Uint32]() -> Uint32: ...
    def __convert__[Uint64]() -> Uint64: ...
    def __convert__[Uint128]() -> Uint128: ...

    # Signed Type Conversions
    def __convert__[Int8]() -> Int8: ...
    def __convert__[Int16]() -> Int16: ...
    def __convert__[Int32]() -> Int32: ...
    def __convert__[Int64]() -> Int64: ...
    def __convert__[Int128]() -> Int128: ...

    # Float Conversions
    def __convert__[Float32]() -> Float32: ...
    def __convert__[Float64]() -> Float64: ...
    def __convert__[Float128]() -> Float128: ...

    # Complex Conversions
    def __convert__[Complex64]() -> Complex64: ...
    def __convert__[Complex128]() -> Complex128: ...
    def __convert__[Complex256]() -> Complex256: ...


#------------------------------------------------------------------------------
# Builtin Number Types
#------------------------------------------------------------------------------

# Unsigned 8-bit integer
type Uint8:
    # Default constructor.
    def __init__() -> None: ...

    # Copy constructor.
    def __init__(other: Uint8) -> None: ...

    # Bitwise left shift. The `<<` operator.
    def __lshift__(n: Uint8) -> Uint8: ...

    # Bitwise right shift. The `>>` operator.
    def __rshift__(n: Uint8) -> Uint8: ...

    # Bitwise `and`. The `&` operator.
    def __and__(other: Uint8) -> Uint8: ...

    # Bitwise `or`. The `|` operator.
    def __or__(other: Uint8) -> Uint8: ...

    # Bitwise `xor`. The `^` operator.
    def __xor__(other: Uint8) -> Uint8: ...

    # Bitwise `not`. The `~` operator.
    def __not__(): -> Uint8: ...

    # Equality comparisons. The `==` operator.
    def __eq__(other: Uint8) -> Bool: ...

    # Equality comparison. The `!=` operator.
    def __ne__(other: Uint8) -> Bool: ...

    # Less-than comparison. The `<` operator.
    def __lt__(other: Uint8) -> Bool: ...

    # Greater-than comparison. The `>` operator.
    def __gt__(other: Uint8) -> Bool: ...

    # Less-than-or-equal comparison. The `<=` operator.
    def __le__(other: Uint8) -> Bool: ...

    # Greater-than-or-equal comparison. The `>=` operator.
    def __ge__(other: Uint8) -> Bool: ...

    # Addition. The `+` operator.
    def __add__(other: Uint8) -> Uint8: ...

    # Subtraction. The `-` operator.
    def __sub__(other: Uint8) -> Uint8: ...

    # Multiplication. The `*` operator.
    def __mul__(other: Uint8) -> Uint8: ...

    # Division. The `/` operator.
    def __div__(other: Uint8) -> Uint8: ...

    # Modulus. The `%` operator.
    def __mod__(other: Uint8) -> Uint8: ...

    # Power. The `**` operator.
    def __pow__(other: Uint8) -> Uint8: ...

    # Byte Conversion
    def __convert__[Byte]() -> Byte: ...

    # Unsigned Type Conversions
    def __convert__[Uint16]() -> Uint16: ...
    def __convert__[Uint32]() -> Uint32: ...
    def __convert__[Uint64]() -> Uint64: ...
    def __convert__[Uint128]() -> Uint128: ...

    # Signed Type Conversions
    def __convert__[Int8]() -> Int8: ...
    def __convert__[Int16]() -> Int16: ...
    def __convert__[Int32]() -> Int32: ...
    def __convert__[Int64]() -> Int64: ...
    def __convert__[Int128]() -> Int128: ...

    # Float Type Conversions
    def __convert__[Float32]() -> Float32: ...
    def __convert__[Float64]() -> Float64: ...
    def __convert__[Float128]() -> Float128: ...

    # Complex Type Conversions
    def __convert__[Complex64]() -> Complex64: ...
    def __convert__[Complex128]() -> Complex128: ...
    def __convert__[Complex256]() -> Complex256: ...


# Unsigned 16-bit integer
type Uint16:
    # Default constructor.
    def __init__() -> None: ...

    # Copy constructor.
    def __init__(other: Uint16) -> None: ...

    # Bitwise left shift. The `<<` operator.
    def __lshift__(n: Uint8) -> Uint16: ...

    # Bitwise right shift. The `>>` operator.
    def __rshift__(n: Uint8) -> Uint16: ...

    # Bitwise `and`. The `&` operator.
    def __and__(other: Uint16) -> Uint16: ...

    # Bitwise `or`. The `|` operator.
    def __or__(other: Uint16) -> Uint16: ...

    # Bitwise `xor`. The `^` operator.
    def __xor__(other: Uint16) -> Uint16: ...

    # Bitwise `not`. The `~` operator.
    def __not__(): -> Uint16: ...

    # Equality comparisons. The `==` operator.
    def __eq__(other: Uint16) -> Bool: ...

    # Equality comparison. The `!=` operator.
    def __ne__(other: Uint16) -> Bool: ...

    # Less-than comparison. The `<` operator.
    def __lt__(other: Uint16) -> Bool: ...

    # Greater-than comparison. The `>` operator.
    def __gt__(other: Uint16) -> Bool: ...

    # Less-than-or-equal comparison. The `<=` operator.
    def __le__(other: Uint16) -> Bool: ...

    # Greater-than-or-equal comparison. The `>=` operator.
    def __ge__(other: Uint16) -> Bool: ...

    # Addition. The `+` operator.
    def __add__(other: Uint16) -> Uint16: ...

    # Subtraction. The `-` operator.
    def __sub__(other: Uint16) -> Uint16: ...

    # Multiplication. The `*` operator.
    def __mul__(other: Uint16) -> Uint16: ...

    # Division. The `/` operator.
    def __div__(other: Uint16) -> Uint16: ...

    # Modulus. The `%` operator.
    def __mod__(other: Uint16) -> Uint16: ...

    # Power. The `**` operator.
    def __pow__(other: Uint16) -> Uint16: ...

    # Byte Conversion
    def __convert__[Byte]() -> Byte: ...

    # Unsigned Type Conversions
    def __convert__[Uint8]() -> Uint8: ...
    def __convert__[Uint32]() -> Uint32: ...
    def __convert__[Uint64]() -> Uint64: ...
    def __convert__[Uint128]() -> Uint128: ...

    # Signed Type Conversions
    def __convert__[Int8]() -> Int8: ...
    def __convert__[Int16]() -> Int16: ...
    def __convert__[Int32]() -> Int32: ...
    def __convert__[Int64]() -> Int64: ...
    def __convert__[Int128]() -> Int128: ...

    # Float Type Conversions
    def __convert__[Float32]() -> Float32: ...
    def __convert__[Float64]() -> Float64: ...
    def __convert__[Float128]() -> Float128: ...

    # Complex Type Conversions
    def __convert__[Complex64]() -> Complex64: ...
    def __convert__[Complex128]() -> Complex128: ...
    def __convert__[Complex256]() -> Complex256: ...


# Unsigned 32-bit integer
type Uint32:
    # Default constructor.
    def __init__() -> None: ...

    # Copy constructor.
    def __init__(other: Uint32) -> None: ...

    # Bitwise left shift. The `<<` operator.
    def __lshift__(n: Uint8) -> Uint32: ...

    # Bitwise right shift. The `>>` operator.
    def __rshift__(n: Uint8) -> Uint32: ...

    # Bitwise `and`. The `&` operator.
    def __and__(other: Uint32) -> Uint32: ...

    # Bitwise `or`. The `|` operator.
    def __or__(other: Uint32) -> Uint32: ...

    # Bitwise `xor`. The `^` operator.
    def __xor__(other: Uint32) -> Uint32: ...

    # Bitwise `not`. The `~` operator.
    def __not__(): -> Uint32: ...

    # Equality comparisons. The `==` operator.
    def __eq__(other: Uint32) -> Bool: ...

    # Equality comparison. The `!=` operator.
    def __ne__(other: Uint32) -> Bool: ...

    # Less-than comparison. The `<` operator.
    def __lt__(other: Uint32) -> Bool: ...

    # Greater-than comparison. The `>` operator.
    def __gt__(other: Uint32) -> Bool: ...

    # Less-than-or-equal comparison. The `<=` operator.
    def __le__(other: Uint32) -> Bool: ...

    # Greater-than-or-equal comparison. The `>=` operator.
    def __ge__(other: Uint32) -> Bool: ...

    # Addition. The `+` operator.
    def __add__(other: Uint32) -> Uint32: ...

    # Subtraction. The `-` operator.
    def __sub__(other: Uint32) -> Uint32: ...

    # Multiplication. The `*` operator.
    def __mul__(other: Uint32) -> Uint32: ...

    # Division. The `/` operator.
    def __div__(other: Uint32) -> Uint32: ...

    # Modulus. The `%` operator.
    def __mod__(other: Uint32) -> Uint32: ...

    # Power. The `**` operator.
    def __pow__(other: Uint32) -> Uint32: ...

    # Byte Conversion
    def __convert__[Byte]() -> Byte: ...

    # Unsigned Type Conversions
    def __convert__[Uint8]() -> Uint8: ...
    def __convert__[Uint16]() -> Uint16: ...
    def __convert__[Uint64]() -> Uint64: ...
    def __convert__[Uint128]() -> Uint128: ...

    # Signed Type Conversions
    def __convert__[Int8]() -> Int8: ...
    def __convert__[Int16]() -> Int16: ...
    def __convert__[Int32]() -> Int32: ...
    def __convert__[Int64]() -> Int64: ...
    def __convert__[Int128]() -> Int128: ...

    # Float Type Conversions
    def __convert__[Float32]() -> Float32: ...
    def __convert__[Float64]() -> Float64: ...
    def __convert__[Float128]() -> Float128: ...

    # Complex Type Conversions
    def __convert__[Complex64]() -> Complex64: ...
    def __convert__[Complex128]() -> Complex128: ...
    def __convert__[Complex256]() -> Complex256: ...


# Unsigned 64-bit integer
type Uint64:
    # Default constructor.
    def __init__() -> None: ...

    # Copy constructor.
    def __init__(other: Uint64) -> None: ...

    # Bitwise left shift. The `<<` operator.
    def __lshift__(n: Uint8) -> Uint64: ...

    # Bitwise right shift. The `>>` operator.
    def __rshift__(n: Uint8) -> Uint64: ...

    # Bitwise `and`. The `&` operator.
    def __and__(other: Uint64) -> Uint64: ...

    # Bitwise `or`. The `|` operator.
    def __or__(other: Uint64) -> Uint64: ...

    # Bitwise `xor`. The `^` operator.
    def __xor__(other: Uint64) -> Uint64: ...

    # Bitwise `not`. The `~` operator.
    def __not__(): -> Uint64: ...

    # Equality comparisons. The `==` operator.
    def __eq__(other: Uint64) -> Bool: ...

    # Equality comparison. The `!=` operator.
    def __ne__(other: Uint64) -> Bool: ...

    # Less-than comparison. The `<` operator.
    def __lt__(other: Uint64) -> Bool: ...

    # Greater-than comparison. The `>` operator.
    def __gt__(other: Uint64) -> Bool: ...

    # Less-than-or-equal comparison. The `<=` operator.
    def __le__(other: Uint64) -> Bool: ...

    # Greater-than-or-equal comparison. The `>=` operator.
    def __ge__(other: Uint64) -> Bool: ...

    # Addition. The `+` operator.
    def __add__(other: Uint64) -> Uint64: ...

    # Subtraction. The `-` operator.
    def __sub__(other: Uint64) -> Uint64: ...

    # Multiplication. The `*` operator.
    def __mul__(other: Uint64) -> Uint64: ...

    # Division. The `/` operator.
    def __div__(other: Uint64) -> Uint64: ...

    # Modulus. The `%` operator.
    def __mod__(other: Uint64) -> Uint64: ...

    # Power. The `**` operator.
    def __pow__(other: Uint64) -> Uint64: ...

    # Byte Conversion
    def __convert__[Byte]() -> Byte: ...

    # Unsigned Type Conversions
    def __convert__[Uint8]() -> Uint8: ...
    def __convert__[Uint16]() -> Uint16: ...
    def __convert__[Uint32]() -> Uint32: ...
    def __convert__[Uint128]() -> Uint128: ...

    # Signed Type Conversions
    def __convert__[Int8]() -> Int8: ...
    def __convert__[Int16]() -> Int16: ...
    def __convert__[Int32]() -> Int32: ...
    def __convert__[Int64]() -> Int64: ...
    def __convert__[Int128]() -> Int128: ...

    # Float Type Conversions
    def __convert__[Float32]() -> Float32: ...
    def __convert__[Float64]() -> Float64: ...
    def __convert__[Float128]() -> Float128: ...

    # Complex Type Conversions
    def __convert__[Complex64]() -> Complex64: ...
    def __convert__[Complex128]() -> Complex128: ...
    def __convert__[Complex256]() -> Complex256: ...


# Unsigned 128-bit integer
type Uint128:
    # Default constructor.
    def __init__() -> None: ...

    # Copy constructor.
    def __init__(other: Uint128) -> None: ...

    # Bitwise left shift. The `<<` operator.
    def __lshift__(n: Uint8) -> Uint128: ...

    # Bitwise right shift. The `>>` operator.
    def __rshift__(n: Uint8) -> Uint128: ...

    # Bitwise `and`. The `&` operator.
    def __and__(other: Uint128) -> Uint128: ...

    # Bitwise `or`. The `|` operator.
    def __or__(other: Uint128) -> Uint128: ...

    # Bitwise `xor`. The `^` operator.
    def __xor__(other: Uint128) -> Uint128: ...

    # Bitwise `not`. The `~` operator.
    def __not__(): -> Uint128: ...

    # Equality comparisons. The `==` operator.
    def __eq__(other: Uint128) -> Bool: ...

    # Equality comparison. The `!=` operator.
    def __ne__(other: Uint128) -> Bool: ...

    # Less-than comparison. The `<` operator.
    def __lt__(other: Uint128) -> Bool: ...

    # Greater-than comparison. The `>` operator.
    def __gt__(other: Uint128) -> Bool: ...

    # Less-than-or-equal comparison. The `<=` operator.
    def __le__(other: Uint128) -> Bool: ...

    # Greater-than-or-equal comparison. The `>=` operator.
    def __ge__(other: Uint128) -> Bool: ...

    # Addition. The `+` operator.
    def __add__(other: Uint128) -> Uint128: ...

    # Subtraction. The `-` operator.
    def __sub__(other: Uint128) -> Uint128: ...

    # Multiplication. The `*` operator.
    def __mul__(other: Uint128) -> Uint128: ...

    # Division. The `/` operator.
    def __div__(other: Uint128) -> Uint128: ...

    # Modulus. The `%` operator.
    def __mod__(other: Uint128) -> Uint128: ...

    # Power. The `**` operator.
    def __pow__(other: Uint128) -> Uint128: ...

    # Byte Conversion
    def __convert__[Byte]() -> Byte: ...

    # Unsigned Type Conversions
    def __convert__[Uint8]() -> Uint8: ...
    def __convert__[Uint16]() -> Uint16: ...
    def __convert__[Uint32]() -> Uint32: ...
    def __convert__[Uint64]() -> Uint64: ...

    # Signed Type Conversions
    def __convert__[Int8]() -> Int8: ...
    def __convert__[Int16]() -> Int16: ...
    def __convert__[Int32]() -> Int32: ...
    def __convert__[Int64]() -> Int64: ...
    def __convert__[Int128]() -> Int128: ...

    # Float Type Conversions
    def __convert__[Float32]() -> Float32: ...
    def __convert__[Float64]() -> Float64: ...
    def __convert__[Float128]() -> Float128: ...

    # Complex Type Conversions
    def __convert__[Complex64]() -> Complex64: ...
    def __convert__[Complex128]() -> Complex128: ...
    def __convert__[Complex256]() -> Complex256: ...


# Signed 8-bit integer
type Int8:
    # Default constructor.
    def __init__() -> None: ...

    # Copy constructor.
    def __init__(other: Int8) -> None: ...

    # Equality comparisons. The `==` operator.
    def __eq__(other: Int8) -> Bool: ...

    # Equality comparison. The `!=` operator.
    def __ne__(other: Int8) -> Bool: ...

    # Less-than comparison. The `<` operator.
    def __lt__(other: Int8) -> Bool: ...

    # Greater-than comparison. The `>` operator.
    def __gt__(other: Int8) -> Bool: ...

    # Less-than-or-equal comparison. The `<=` operator.
    def __le__(other: Int8) -> Bool: ...

    # Greater-than-or-equal comparison. The `>=` operator.
    def __ge__(other: Int8) -> Bool: ...

    # Addition. The `+` operator.
    def __add__(other: Int8) -> Int8: ...

    # Subtraction. The `-` operator.
    def __sub__(other: Int8) -> Int8: ...

    # Multiplication. The `*` operator.
    def __mul__(other: Int8) -> Int8: ...

    # Division. The `/` operator.
    def __div__(other: Int8) -> Int8: ...

    # Modulus. The `%` operator.
    def __mod__(other: Int8) -> Int8: ...

    # Power. The `**` operator.
    def __pow__(other: Int8) -> Int8: ...

    # Byte Conversion
    def __convert__[Byte]() -> Byte: ...

    # Unsigned Type Conversions
    def __convert__[Uint8]() -> Uint8: ...
    def __convert__[Uint16]() -> Uint16: ...
    def __convert__[Uint32]() -> Uint32: ...
    def __convert__[Uint64]() -> Uint64: ...
    def __convert__[Uint128]() -> Uint128: ...

    # Signed Type Conversions
    def __convert__[Int16]() -> Int16: ...
    def __convert__[Int32]() -> Int32: ...
    def __convert__[Int64]() -> Int64: ...
    def __convert__[Int128]() -> Int128: ...

    # Float Type Conversions
    def __convert__[Float32]() -> Float32: ...
    def __convert__[Float64]() -> Float64: ...
    def __convert__[Float128]() -> Float128: ...

    # Complex Type Conversions
    def __convert__[Complex64]() -> Complex64: ...
    def __convert__[Complex128]() -> Complex128: ...
    def __convert__[Complex256]() -> Complex256: ...


# Signed 16-bit integer
type Int16:
    # Default constructor.
    def __init__() -> None: ...

    # Copy constructor.
    def __init__(other: Int16) -> None: ...

    # Equality comparisons. The `==` operator.
    def __eq__(other: Int16) -> Bool: ...

    # Equality comparison. The `!=` operator.
    def __ne__(other: Int16) -> Bool: ...

    # Less-than comparison. The `<` operator.
    def __lt__(other: Int16) -> Bool: ...

    # Greater-than comparison. The `>` operator.
    def __gt__(other: Int16) -> Bool: ...

    # Less-than-or-equal comparison. The `<=` operator.
    def __le__(other: Int16) -> Bool: ...

    # Greater-than-or-equal comparison. The `>=` operator.
    def __ge__(other: Int16) -> Bool: ...

    # Addition. The `+` operator.
    def __add__(other: Int16) -> Int16: ...

    # Subtraction. The `-` operator.
    def __sub__(other: Int16) -> Int16: ...

    # Multiplication. The `*` operator.
    def __mul__(other: Int16) -> Int16: ...

    # Division. The `/` operator.
    def __div__(other: Int16) -> Int16: ...

    # Modulus. The `%` operator.
    def __mod__(other: Int16) -> Int16: ...

    # Power. The `**` operator.
    def __pow__(other: Int16) -> Int16: ...

    # Byte Conversion
    def __convert__[Byte]() -> Byte: ...

    # Unsigned Type Conversions
    def __convert__[Uint8]() -> Uint8: ...
    def __convert__[Uint16]() -> Uint16: ...
    def __convert__[Uint32]() -> Uint32: ...
    def __convert__[Uint64]() -> Uint64: ...
    def __convert__[Uint128]() -> Uint128: ...

    # Signed Type Conversions
    def __convert__[Int8]() -> Int8: ...
    def __convert__[Int32]() -> Int32: ...
    def __convert__[Int64]() -> Int64: ...
    def __convert__[Int128]() -> Int128: ...

    # Float Type Conversions
    def __convert__[Float32]() -> Float32: ...
    def __convert__[Float64]() -> Float64: ...
    def __convert__[Float128]() -> Float128: ...

    # Complex Type Conversions
    def __convert__[Complex64]() -> Complex64: ...
    def __convert__[Complex128]() -> Complex128: ...
    def __convert__[Complex256]() -> Complex256: ...


# Signed 32-bit integer
type Int32:
    # Default constructor.
    def __init__() -> None: ...

    # Copy constructor.
    def __init__(other: Int32) -> None: ...

    # Equality comparisons. The `==` operator.
    def __eq__(other: Int32) -> Bool: ...

    # Equality comparison. The `!=` operator.
    def __ne__(other: Int32) -> Bool: ...

    # Less-than comparison. The `<` operator.
    def __lt__(other: Int32) -> Bool: ...

    # Greater-than comparison. The `>` operator.
    def __gt__(other: Int32) -> Bool: ...

    # Less-than-or-equal comparison. The `<=` operator.
    def __le__(other: Int32) -> Bool: ...

    # Greater-than-or-equal comparison. The `>=` operator.
    def __ge__(other: Int32) -> Bool: ...

    # Addition. The `+` operator.
    def __add__(other: Int32) -> Int32: ...

    # Subtraction. The `-` operator.
    def __sub__(other: Int32) -> Int32: ...

    # Multiplication. The `*` operator.
    def __mul__(other: Int32) -> Int32: ...

    # Division. The `/` operator.
    def __div__(other: Int32) -> Int32: ...

    # Modulus. The `%` operator.
    def __mod__(other: Int32) -> Int32: ...

    # Power. The `**` operator.
    def __pow__(other: Int32) -> Int32: ...

    # Byte Conversion
    def __convert__[Byte]() -> Byte: ...

    # Unsigned Type Conversions
    def __convert__[Uint8]() -> Uint8: ...
    def __convert__[Uint16]() -> Uint16: ...
    def __convert__[Uint32]() -> Uint32: ...
    def __convert__[Uint64]() -> Uint64: ...
    def __convert__[Uint128]() -> Uint128: ...

    # Signed Type Conversions
    def __convert__[Int8]() -> Int8: ...
    def __convert__[Int16]() -> Int16: ...
    def __convert__[Int64]() -> Int64: ...
    def __convert__[Int128]() -> Int128: ...

    # Float Type Conversions
    def __convert__[Float32]() -> Float32: ...
    def __convert__[Float64]() -> Float64: ...
    def __convert__[Float128]() -> Float128: ...

    # Complex Type Conversions
    def __convert__[Complex64]() -> Complex64: ...
    def __convert__[Complex128]() -> Complex128: ...
    def __convert__[Complex256]() -> Complex256: ...


# Signed 64-bit integer
type Int64:
    # Default constructor.
    def __init__() -> None: ...

    # Copy constructor.
    def __init__(other: Int64) -> None: ...

    # Equality comparisons. The `==` operator.
    def __eq__(other: Int64) -> Bool: ...

    # Equality comparison. The `!=` operator.
    def __ne__(other: Int64) -> Bool: ...

    # Less-than comparison. The `<` operator.
    def __lt__(other: Int64) -> Bool: ...

    # Greater-than comparison. The `>` operator.
    def __gt__(other: Int64) -> Bool: ...

    # Less-than-or-equal comparison. The `<=` operator.
    def __le__(other: Int64) -> Bool: ...

    # Greater-than-or-equal comparison. The `>=` operator.
    def __ge__(other: Int64) -> Bool: ...

    # Addition. The `+` operator.
    def __add__(other: Int64) -> Int64: ...

    # Subtraction. The `-` operator.
    def __sub__(other: Int64) -> Int64: ...

    # Multiplication. The `*` operator.
    def __mul__(other: Int64) -> Int64: ...

    # Division. The `/` operator.
    def __div__(other: Int64) -> Int64: ...

    # Modulus. The `%` operator.
    def __mod__(other: Int64) -> Int64: ...

    # Power. The `**` operator.
    def __pow__(other: Int64) -> Int64: ...

    # Byte Conversion
    def __convert__[Byte]() -> Byte: ...

    # Unsigned Type Conversions
    def __convert__[Uint8]() -> Uint8: ...
    def __convert__[Uint16]() -> Uint16: ...
    def __convert__[Uint32]() -> Uint32: ...
    def __convert__[Uint64]() -> Uint64: ...
    def __convert__[Uint128]() -> Uint128: ...

    # Signed Type Conversions
    def __convert__[Int8]() -> Int8: ...
    def __convert__[Int16]() -> Int16: ...
    def __convert__[Int32]() -> Int32: ...
    def __convert__[Int128]() -> Int128: ...

    # Float Type Conversions
    def __convert__[Float32]() -> Float32: ...
    def __convert__[Float64]() -> Float64: ...
    def __convert__[Float128]() -> Float128: ...

    # Complex Type Conversions
    def __convert__[Complex64]() -> Complex64: ...
    def __convert__[Complex128]() -> Complex128: ...
    def __convert__[Complex256]() -> Complex256: ...


# Signed 128-bit integer
type Int128:
    # Default constructor.
    def __init__() -> None: ...

    # Copy constructor.
    def __init__(other: Int28) -> None: ...

    # Equality comparisons. The `==` operator.
    def __eq__(other: Int128) -> Bool: ...

    # Equality comparison. The `!=` operator.
    def __ne__(other: Int128) -> Bool: ...

    # Less-than comparison. The `<` operator.
    def __lt__(other: Int128) -> Bool: ...

    # Greater-than comparison. The `>` operator.
    def __gt__(other: Int128) -> Bool: ...

    # Less-than-or-equal comparison. The `<=` operator.
    def __le__(other: Int128) -> Bool: ...

    # Greater-than-or-equal comparison. The `>=` operator.
    def __ge__(other: Int128) -> Bool: ...

    # Addition. The `+` operator.
    def __add__(other: Int128) -> Int128: ...

    # Subtraction. The `-` operator.
    def __sub__(other: Int128) -> Int128: ...

    # Multiplication. The `*` operator.
    def __mul__(other: Int128) -> Int128: ...

    # Division. The `/` operator.
    def __div__(other: Int128) -> Int128: ...

    # Modulus. The `%` operator.
    def __mod__(other: Int128) -> Int128: ...

    # Power. The `**` operator.
    def __pow__(other: Int128) -> Int128: ...

    # Byte Conversion
    def __convert__[Byte]() -> Byte: ...

    # Unsigned Type Conversions
    def __convert__[Uint8]() -> Uint8: ...
    def __convert__[Uint16]() -> Uint16: ...
    def __convert__[Uint32]() -> Uint32: ...
    def __convert__[Uint64]() -> Uint64: ...
    def __convert__[Uint128]() -> Uint128: ...

    # Signed Type Conversions
    def __convert__[Int8]() -> Int8: ...
    def __convert__[Int16]() -> Int16: ...
    def __convert__[Int32]() -> Int32: ...
    def __convert__[Int64]() -> Int64: ...

    # Float Type Conversions
    def __convert__[Float32]() -> Float32: ...
    def __convert__[Float64]() -> Float64: ...
    def __convert__[Float128]() -> Float128: ...

    # Complex Type Conversions
    def __convert__[Complex64]() -> Complex64: ...
    def __convert__[Complex128]() -> Complex128: ...
    def __convert__[Complex256]() -> Complex256: ...


# IEE-754 32bit floating point
type Float32:
    # Default constructor.
    def __init__() -> None: ...

    # Copy constructor.
    def __init__(other: Float32) -> None: ...

    # Equality comparisons. The `==` operator.
    def __eq__(other: Float32) -> Bool: ...

    # Equality comparison. The `!=` operator.
    def __ne__(other: Float32) -> Bool: ...

    # Less-than comparison. The `<` operator.
    def __lt__(other: Float32) -> Bool: ...

    # Greater-than comparison. The `>` operator.
    def __gt__(other: Float32) -> Bool: ...

    # Less-than-or-equal comparison. The `<=` operator.
    def __le__(other: Float32) -> Bool: ...

    # Greater-than-or-equal comparison. The `>=` operator.
    def __ge__(other: Float32) -> Bool: ...

    # Addition. The `+` operator.
    def __add__(other: Float32) -> Float32: ...

    # Subtraction. The `-` operator.
    def __sub__(other: Float32) -> Float32: ...

    # Multiplication. The `*` operator.
    def __mul__(other: Float32) -> Float32: ...

    # Division. The `/` operator.
    def __div__(other: Float32) -> Float32: ...

    # Modulus. The `%` operator.
    def __mod__(other: Float32) -> Float32: ...

    # Power. The `**` operator.
    def __pow__(other: Float32) -> Float32: ...

    # Byte Conversion
    def __convert__[Byte]() -> Byte: ...

    # Unsigned Type Conversions
    def __convert__[Uint8]() -> Uint8: ...
    def __convert__[Uint16]() -> Uint16: ...
    def __convert__[Uint32]() -> Uint32: ...
    def __convert__[Uint64]() -> Uint64: ...
    def __convert__[Uint128]() -> Uint128: ...

    # Signed Type Conversions
    def __convert__[Int8]() -> Int8: ...
    def __convert__[Int16]() -> Int16: ...
    def __convert__[Int32]() -> Int32: ...
    def __convert__[Int64]() -> Int64: ...
    def __convert__[Int128]() -> Int128: ...

    # Float Type Conversions
    def __convert__[Float64]() -> Float64: ...
    def __convert__[Float128]() -> Float128: ...

    # Complex Type Conversions
    def __convert__[Complex64]() -> Complex64: ...
    def __convert__[Complex128]() -> Complex128: ...
    def __convert__[Complex256]() -> Complex256: ...


# IEE-754 64bit floating point
type Float64:
    # Default constructor.
    def __init__() -> None: ...

    # Copy constructor.
    def __init__(other: Float64) -> None: ...

    # Equality comparisons. The `==` operator.
    def __eq__(other: Float64) -> Bool: ...

    # Equality comparison. The `!=` operator.
    def __ne__(other: Float64) -> Bool: ...

    # Less-than comparison. The `<` operator.
    def __lt__(other: Float64) -> Bool: ...

    # Greater-than comparison. The `>` operator.
    def __gt__(other: Float64) -> Bool: ...

    # Less-than-or-equal comparison. The `<=` operator.
    def __le__(other: Float64) -> Bool: ...

    # Greater-than-or-equal comparison. The `>=` operator.
    def __ge__(other: Float64) -> Bool: ...

    # Addition. The `+` operator.
    def __add__(other: Float64) -> Float64: ...

    # Subtraction. The `-` operator.
    def __sub__(other: Float64) -> Float64: ...

    # Multiplication. The `*` operator.
    def __mul__(other: Float64) -> Float64: ...

    # Division. The `/` operator.
    def __div__(other: Float64) -> Float64: ...

    # Modulus. The `%` operator.
    def __mod__(other: Float64) -> Float64: ...

    # Power. The `**` operator.
    def __pow__(other: Float64) -> Float64: ...

    # Byte Conversion
    def __convert__[Byte]() -> Byte: ...

    # Unsigned Type Conversions
    def __convert__[Uint8]() -> Uint8: ...
    def __convert__[Uint16]() -> Uint16: ...
    def __convert__[Uint32]() -> Uint32: ...
    def __convert__[Uint64]() -> Uint64: ...
    def __convert__[Uint128]() -> Uint128: ...

    # Signed Type Conversions
    def __convert__[Int8]() -> Int8: ...
    def __convert__[Int16]() -> Int16: ...
    def __convert__[Int32]() -> Int32: ...
    def __convert__[Int64]() -> Int64: ...
    def __convert__[Int128]() -> Int128: ...

    # Float Type Conversions
    def __convert__[Float32]() -> Float32: ...
    def __convert__[Float128]() -> Float128: ...

    # Complex Type Conversions
    def __convert__[Complex64]() -> Complex64: ...
    def __convert__[Complex128]() -> Complex128: ...
    def __convert__[Complex256]() -> Complex256: ...


# IEE-754 128bit floating point
type Float128:
    # Default constructor.
    def __init__() -> None: ...

    # Copy constructor.
    def __init__(other: Float128) -> None: ...

    # Equality comparisons. The `==` operator.
    def __eq__(other: Float128) -> Bool: ...

    # Equality comparison. The `!=` operator.
    def __ne__(other: Float128) -> Bool: ...

    # Less-than comparison. The `<` operator.
    def __lt__(other: Float128) -> Bool: ...

    # Greater-than comparison. The `>` operator.
    def __gt__(other: Float128) -> Bool: ...

    # Less-than-or-equal comparison. The `<=` operator.
    def __le__(other: Float128) -> Bool: ...

    # Greater-than-or-equal comparison. The `>=` operator.
    def __ge__(other: Float128) -> Bool: ...

    # Addition. The `+` operator.
    def __add__(other: Float128) -> Float128: ...

    # Subtraction. The `-` operator.
    def __sub__(other: Float128) -> Float128: ...

    # Multiplication. The `*` operator.
    def __mul__(other: Float128) -> Float128: ...

    # Division. The `/` operator.
    def __div__(other: Float128) -> Float128: ...

    # Modulus. The `%` operator.
    def __mod__(other: Float128) -> Float128: ...

    # Byte Conversion
    def __convert__[Byte]() -> Byte: ...

    # Unsigned Type Conversions
    def __convert__[Uint8]() -> Uint8: ...
    def __convert__[Uint16]() -> Uint16: ...
    def __convert__[Uint32]() -> Uint32: ...
    def __convert__[Uint64]() -> Uint64: ...
    def __convert__[Uint128]() -> Uint128: ...

    # Signed Type Conversions
    def __convert__[Int8]() -> Int8: ...
    def __convert__[Int16]() -> Int16: ...
    def __convert__[Int32]() -> Int32: ...
    def __convert__[Int64]() -> Int64: ...
    def __convert__[Int128]() -> Int128: ...

    # Float Type Conversions
    def __convert__[Float32]() -> Float32: ...
    def __convert__[Float64]() -> Float64: ...

    # Complex Type Conversions
    def __convert__[Complex64]() -> Complex64: ...
    def __convert__[Complex128]() -> Complex128: ...
    def __convert__[Complex256]() -> Complex256: ...


# 64bit complex type
type Complex64:

    # The real component of the complex type.
    const real: Float32

    # The imaginary component of the complex type.
    const imag: Float32

    # Default constructor.
    def __init__() -> None: ...

    # Copy constructor.
    def __init__(other: Complex64) -> None: ...

    # Explicit constructor.
    def __init__(real: Float32, imag: Float32) -> None: ...

    # Equality comparisons. The `==` operator.
    def __eq__(other: Complex64) -> Bool: ...

    # Equality comparison. The `!=` operator.
    def __ne__(other: Complex64) -> Bool: ...

    # Addition. The `+` operator.
    def __add__(other: Complex64) -> Complex64: ...

    # Subtraction. The `-` operator.
    def __sub__(other: Complex64) -> Complex64: ...

    # Multiplication. The `*` operator.
    def __mul__(other: Complex64) -> Complex64: ...

    # Division. The `/` operator.
    def __div__(other: Complex64) -> Complex64: ...


# 128bit complex type
type Complex128:

    # The real component of the complex type.
    const real: Float64

    # The imaginary component of the complex type.
    const imag: Float64

    # Default constructor.
    def __init__() -> None: ...

    # Copy constructor.
    def __init__(other: Complex128) -> None: ...

    # Explicit constructor.
    def __init__(real: Float64, imag: Float64) -> None: ...

    # Equality comparisons. The `==` operator.
    def __eq__(other: Complex128) -> Bool: ...

    # Equality comparison. The `!=` operator.
    def __ne__(other: Complex128) -> Bool: ...

    # Addition. The `+` operator.
    def __add__(other: Complex128) -> Complex128: ...

    # Subtraction. The `-` operator.
    def __sub__(other: Complex128) -> Complex128: ...

    # Multiplication. The `*` operator.
    def __mul__(other: Complex128) -> Complex128: ...

    # Division. The `/` operator.
    def __div__(other: Complex128) -> Complex128: ...


# 256bit complex type
type Complex256:

    # The real component of the complex type.
    const real: Float128

    # The imaginary component of the complex type.
    const imag: Float128

    # Default constructor.
    def __init__() -> None: ...

    # Copy constructor.
    def __init__(other: Complex256) -> None: ...

    # Explicit constructor.
    def __init__(real: Float128, imag: Float128) -> None: ...

    # Equality comparisons. The `==` operator.
    def __eq__(other: Complex256) -> Bool: ...

    # Equality comparison. The `!=` operator.
    def __ne__(other: Complex256) -> Bool: ...

    # Addition. The `+` operator.
    def __add__(other: Complex256) -> Complex256: ...

    # Subtraction. The `-` operator.
    def __sub__(other: Complex256) -> Complex256: ...

    # Multiplication. The `*` operator.
    def __mul__(other: Complex256) -> Complex256: ...

    # Division. The `/` operator.
    def __div__(other: Complex256) -> Complex256: ...


#------------------------------------------------------------------------------
# Sequence Protocol
#------------------------------------------------------------------------------

# The `Sequence` protocol.
#
# A `Sequence` is a simple object representing an ordered sequence of values.
#
# In addition to direct-index, it can be used in a `for...in` construct.
#
# If an object is both a `Sequence` and an `Iterable`, the `Sequence` protocol
# will be preferred for iteration as it is assumed to be more efficient.
protocol Sequence[T]:

    # The length of the sequence, in number of elements.
    readonly length: Uint64

    # Get the item at the specified index in the sequence.
    #
    # Indexing out-of-bounds is implementation-defined.
    #
    # Note that negative indexing is not supported.
    def __getitem__(index: Uint64) -> T: ...


#------------------------------------------------------------------------------
# Iterator Protocol
#------------------------------------------------------------------------------

# The `Iterator` protocol.
#
# An `Iterator` is an object that can be used in a `for...in` construct.
#
# It's role is produce a stream of values from the underlying collection.
protocol Iterator[T]:

    # Iterators themselves must be `Iterable`.
    #
    # Typically, an iterator will return itself.
    def __iter__() -> Iterator[T]: ...

    # Get the next element from the iterator.
    #
    # When the iterator is exhausted, it will always return `None`.
    def __next__() -> Option[T]: ...


# The `Iterable` protocal
#
# An `Iterable` is an object that can be used in a `for...in` construct.
#
# It's role is to produce the `Iterator` that will be consumed by the runtime.
#
# If an object is both a `Sequence` and an `Iterable`, the `Sequence` protocol
# will be preferred for iteration as it is assumed to be more efficient.
protocol Iterable[T]:

    # Produce the `Iterator` object for the underlying collection.
    def __iter__() -> Iterator[T]: ...


#------------------------------------------------------------------------------
# Builtin Tuple Type
#------------------------------------------------------------------------------

# A fixed-size immutable collection of values.
#
# Corresponds to the `(a, b, c)` literal syntax.
#
# A `Tuple` is a reference type, but it cannot be subclassed.
#
# The elements of a tuple must be a single reified type.
final
class Tuple[T]:

    # The length of the tuple, in number of elements.
    const length: Uint64

    # Default constructor.
    def __init__() -> None: ...

    # Sequence constructor.
    #
    # The new tuple has a *new* internal buffer populated by the sequence.
    def __init__(other: Sequence[T]) -> None: ...

    # Iterable constructor.
    #
    # The new tuple has a *new* internal buffer populated by the iterable.
    def __init__(other: Iterable[T]) -> None: ...

    # Get the item at the specified index in the tuple.
    #
    # Indexing out-of-bounds is implementation-defined.
    def __getitem__(index: Uint64) -> T: ...


#------------------------------------------------------------------------------
# Builtin Array Type
#------------------------------------------------------------------------------

# A fixed-size mutable collection of values.
#
# Corresponds to the `[a, b, c]` literal syntax.
#
# An `Array` is a reference type, but it cannot be subclassed.
final
class Array[T]:

    # The length of the array, in number of elements.
    const length: Uint64

    # Sequence constructor.
    #
    # The new array has a new internal buffer populated by the sequence.
    def __init__(other: Sequence[T]) -> None: ...

    # Iterable constructor.
    #
    # The new array has a new internal buffer populated by the sequence.
    def __init__(other: Iterable[T]) -> None: ...

    # Sized constructor.
    #
    # The new array will have a zero-initialized internal buffer.
    def __init__(length: Uint64) -> None: ...

    # Get the item at the specified index in the array.
    #
    # Indexing out-of-bounds is implementation-defined.
    #
    # Note that negative indexing is not supported.
    def __getitem__(index: Uint64) -> T: ...

    # Set the item at the specified index in the array.
    #
    # Indexing out-of-bounds is implementation-defined.
    def __setitem__(index: Uint64, value: T) -> None: ...


#------------------------------------------------------------------------------
# Builtin Buffer Type
#------------------------------------------------------------------------------

# The builtin type-and-size aware heap memory allocator for PostPython.
#
# The buffer object is a reference type and cannot be subclassed.
final
class Buffer[T]:
    # The length of the buffer in number of `T` elements.
    #
    # This will grow up to `capcity` as elements are assigned to
    # `index == length` at which point it will cease to grow.
    readonly length: Uint64

    # The capacity of the buffer in number of `T` elements.
    #
    # This value is always `>= length`.
    #
    # If `length > capacity` the extra elements are un-initialized and
    # cannot be accessed until asigned to at `index == length`.
    #
    # This will only change if the buffer is resized.
    readonly capacity: Uint64

    # Default constructor.
    #
    # The buffer will have zero `length` and default `capacity`.
    def __init__() -> None: ...

    # Construct a `Buffer` object to hold `capacity` elements of a type.
    #
    # The `length` of the buffer will be zero, but the `capacity` is
    # guaranteed to be "at least" the requested capacity.
    def __init__(capacity: Uint64) -> None: ...

    # Get the element at the specified buffer index.
    #
    # Indexing at `< length` is guaranteed to be a valid object.
    #
    # Indexing out-of-bounds is implementation-defined.
    def __getitem__(index: Uint64) -> T: ...

    # Set the element at the specified buffer index.
    #
    # Assigning at `< length` is guaranteed to overwrite an existing
    # object.
    #
    # Assigning at `index == length` if `length < capacity` is guaranteed
    # to to initialize the element at that index, and the `length` will be
    # increased by `1`.
    #
    # Assigning at `index >= length` if `length == capacity` is a programing
    # error and the behavior is implementation defined.
    def __setitem__(index: Uint64, value: T) -> None: ...

    # Resize the `Buffer` object to hold at least `capacity` elements.
    #
    # The new `capacity` is guaranteed to hold at least `capcity` elements.
    #
    # If the internal memory is moved, the valid elements up to `length`
    # will be bitwise copied transparently (no initializers or destructors).
    #
    # If the internal memory is shrunk, valid stale value types will have
    # their destructors calls. Valid Reference types will still be subject
    # to the destruction rules of the garbage collector.
    def resize(self, capacity: Uint64): -> None ...

