#------------------------------------------------------------------------------
# POSTPython Vector Module
#
#
#------------------------------------------------------------------------------
from .algorithm import max, min
from .buffer import Buffer
from .iterable import Iterable
from .numbers import Int64
from .sequence import Sequence


# A `Vector` is a resizable sequence of elements.
#
# In reality, a `Vector` is an abstraction over a `Buffer` that guarantees
# amortized constant resizing of the buffer.
#
# A `Vector` has constant-time access for all of its elements. It is most
# efficient when adding and removing at the end of the vector. However, small
# vectors will typically out-perform map types for random insertions due to
# cache locality.
#
# Note: For performance, a `Vector` never implicitly shrinks it's `capacity`.
#       That must be done manually by user code by calling `shrink`.
class Vector[T]:
    # Get the current length of the vector.
    #
    # TODO havent yet figured out the syntax for computed properties.
    get length() -> Int64:
        return self._buffer.length

    # Get the current capacity of the vector.
    #
    # TODO havent yet figured out the syntax for computed properties.
    get capacity() -> Int64:
        return self._buffer.capacity

    # Default constructor.
    #
    # Construct a new vector with an initial capacity.
    #
    # The default capacity of a vector is `0`.
    def __init__(capacity: Int64 = 0):
        self._buffer = Buffer[T](capacity)

    # Copy constructor.
    #
    # The new vector has a new internal buffer populated by the other vector.
    def __init__(other: Vector[T]):
        self._buffer = Buffer(other._buffer)

    # Sequence/Iterable constructor.
    #
    # The new vector has a new internal buffer populated by the other object.
    def __init__(other: Sequence[T]):
    def __init__(other: Iterable[T]):
        self._buffer = Buffer(other)

    # Buffer constructor.
    #
    # This constructs a new vector from a pre-existing buffer.
    #
    # If `copy` is `false`, the new vector takes logical "ownership" of the
    # buffer and adopts the buffer as its own. This is useful if user-code
    # can ensure that there are no other external users of the buffer, which
    # could otherwise lead to hard-to-debug behavior.
    #
    # If `copy` is `true`, the default, a copy of the buffer will be made.
    def __init__(other: Buffer[T], copy = true):
        self._buffer = Buffer(other) if copy else other

    # Retrieve an element from the vector.
    #
    # Negative indices wrap around from the end of the vector.
    def __getitem__(index: Int64) -> T:
        return self._buffer[index]

    # Get a slice of the Vector.
    #
    # This method mimics the behavior of Python and will not fail due to
    # indices in the slice being out-of-bounds. It returns a new vector
    # based on a "best effort" approach.
    def __getitem__(slice: Slice) -> Vector[T]:
        return Vector(self._buffer[slice], false)

    # Set an element in the vector.
    #
    # Negative indices wrap around from the end of the vector.
    def __setitem__(index: Int64, value: T):
        self._buffer[index] = value

    # Set a slice of the vector from another vector.
    #
    # This method mimics the behavior of `__getitem__(Slice)` and will not
    # fail based on out-of-bounds or out-of-length access. It operates on a
    # "best effort" approach.
    def __setitem__(slice: Slice, other: Vector[T]):
        self._buffer[slice] = other._buffer

    # Set a slice of the vector from an object.
    #
    # This method mimics the behavior of `__getitem__(Slice)` and will not
    # fail based on out-of-bounds or out-of-length access. It operates on a
    # "best effort" approach.
    def __setitem__(slice: Slice, other: Buffer[T]):
    def __setitem__(slice: Slice, other: Sequence[T]):
    def __setitem__(slice: Slice, other: Iterable[T]):
        self._buffer[slice] = other

    # Trim the contents of the vector to the specified `length`.
    #
    # This does not change the capacity of the vector, but it does allow
    # the logically "stale" elements to be garbage collected.
    #
    # If the new length is `< 0` that new length will be added to the
    # existing `length` to determine the final trim length.
    #
    # This can only reduce the vector's `length`, not increase it.
    def trim(length: Int64 = 0):
        self._buffer.trim(length)

    # Grow the `capacity` of the vector to a new value.
    #
    # This can be used to pre-allocate space in the vector before performing
    # large additions, thereby reducing internal reallocations.
    #
    # This can only increase the vector's `capacity`, not reduce it.
    #
    # The current `length` of the vector does not change.
    def grow(capacity: Int64):
        self._buffer.resize(max(self._buffer.capacity, capacity))

    # Shrink the `capacity` of the vector to a new value.
    #
    # This may change the `length` of the vector and allow the logcially
    # "stale" elements to be garbage collected.
    #
    # This can only reduce the vector's `capacity`, not increase it.
    def shrink(capacity: Int64):
        self._buffer.resize(min(self._buffer.capacity, capacity))

    # Get the element at the front of the vector.
    def front() -> T:
        return self._buffer[0]

    # Get the element at the back of the vector.
    def back() -> T:
        return self._buffer[-1]

    # Insert an element at the end of the vector.
    #
    # This will grow the capacity of the vector as needed.
    def push_back(value: T):
        # Grow the buffer capacity if needed.
        self._maybe_grow(1)

        # Assign the value to end of the buffer.
        self._buffer[self._buffer.length] = value

    # Remove the element at the end of the vector.
    #
    # This will not change the `capacity` of the vector.
    def pop_back() -> T:
        # Fetch the last element.
        value = self._buffer[-1]

        # Trim the length of the buffer.
        self._buffer.trim(-1)

        # Return the pop'd value
        return value

    # Insert a value into the vector.
    #
    # Negative indices wrap around from the end of the vector.
    #
    # This will grow the capacity of the vector as needed.
    def insert(index: Int64, value: T):
        # Wraparound negative indices.
        if index < 0:
            index += self._buffer.length

        # Ensure a valid index.
        if index < 0 or index > self._buffer.length:
            panic "Invalid `index` for `Vector.insert()`"

        # Grow the buffer if needed.
        self._maybe_grow(1)

        # Move elements forward in the buffer if needed.
        if index < self._buffer.length:
            count = self._buffer.length - index
            self._buffer.move(index, index + 1, count)

        # Assign the value at the specified index.
        self._buffer[index] = value

    # Insert the content from another vector at a given index.
    #
    # Negative indices wrap around from the end of the vector.
    #
    # This will grow the capacity of the vector as needed.
    def insert(index: Int64, other: Vector[T]):
        self.insert(index, other._buffer)

    # Insert the content from an iterable at a given index.
    #
    # Negative indices wrap around from the end of the vector.
    #
    # This will grow the capacity of the vector as needed.
    #
    # Note: For large iterables, this may be expensive since the iterable
    #       must first be exhausted by copying into a temporary buffer in
    #       order to determine its final size.
    def insert(index: Int64, other: Iterable[T]):
        self.insert(index, Buffer(other))

    # Insert the content from an object into the vector.
    #
    # Negative indices wrap around from the end of the vector.
    #
    # This will grow the capacity of the vector as needed.
    def insert(index: Int64, other: Buffer[T]):
    def insert(index: Int64, other: Sequence[T]):
        # Wraparound negative indices.
        if index < 0:
            index += self._buffer.length

        # Ensure a valid index.
        if index < 0 or index > self._buffer.length:
            panic "Invalid `index` for `Vector.insert()`"

        # Bail early if there is nothing to insert.
        if other.length <= 0:
            return

        # Grow the buffer if needed.
        self._maybe_grow(other.length)

        # Calculate the stop index, exclusive.
        stop = index + other.length

        # Move elements forward in the buffer if needed.
        if index < self._buffer.length:
            count = self._buffer.length - index
            self._buffer.move(index, stop, count)

        # Write the elements to the buffer.
        self._buffer[index:stop] = other

    # Insert content from an object at the end of the vector.
    #
    # Negative indices wrap around from the end of the vector.
    #
    # This will grow the capacity of the vector as needed.
    def extend(other: Buffer[T]):
    def extend(other: Vector[T]):
    def extend(other: Sequence[T]):
    def extend(other: Iterable[T]):
        self.insert(self._buffer.length, other)

    # Remove `count` elements from the vector starting at `index`.
    #
    # Negative indices wrap around from the end of the vector.
    #
    # This will not change the `capacity` of the vector.
    def remove(index: Int64, count: Int64 = 1):
        # Wraparound negative indices.
        if index < 0:
            index += self._buffer.length

        # Ensure a valid index.
        if index < 0 or index >= self._buffer.length:
            panic "Invalid `index` for `Vector.remove()`"

        # Clamp the count to the minimum logical value.
        count = min(count, self._buffer.length - index)

        # Bail early if there is nothing to remove.
        if count <= 0:
            return

        # Calculate the src index for a move.
        src = index + count

        # Perform a simple trim if possible.
        if src >= self._buffer.length:
            self._buffer.trim(index)
            return

        # Move remaining elements backward in the buffer.
        tailcount = self._buffer.length - src
        self._buffer.move(src, index, tailcount)

        # Trim the buffer by the removed amount.
        self._buffer.trim(-count)

    # Swap the internal buffer with another vector.
    #
    # This can useful to transfer "ownership" of the elements from
    # one vector to another without needing to create copies.
    def swap(other: Vector[T]):
        buffer = self._buffer
        self._buffer = other._buffer
        other._buffer = buffer

    # Grow the vector, if needed, to store `n` additional elements.
    def _maybe_grow(n: Int64):
        # Bail early if nothing is actually being added.
        if n <= 0:
            return

        # Determine the needed length.
        needed = self._buffer.length + n

        # Bail early if there is currently sufficient capacity.
        if needed <= self._buffer.capacity:
            return

        # Resize the buffer. This either doubles the current capacity,
        # or uses the `needed` value, whichever is greater.
        self._buffer.resize(max(self._buffer.capacity * 2, needed))

    # The internal buffer storage for the vector.
    _buffer: Buffer[T]

