#------------------------------------------------------------------------------
# POSTPython Option Module
#
#
#------------------------------------------------------------------------------
from .bool import Bool


# The builtin `Option` type.
#
# POSTPython does not have the concept of `None`. Whenever the concept
# of a "missing" value is needed, the `Option` type should be used.
#
# For example, the `Iterator` protocol uses `Option` types instead of a
# traditional Python `StopIteration` exception.
#
# In general, POSTPython takes the approach that exceptions should not
# be used for control flow.
#
# If an `Option` tests boolean `false` it will *always* be invalid.
#
# If an `Option` tests boolean `true` it will *always* be valid.
type Option[T]:
    # Default constructor.
    #
    # This constructs a `false` option object.
    def __init__(): ...

    # Value constructor.
    #
    # This constructs a `true` option object with the given `value`.
    def __init__(value: T): ...

    # Unpack the `Option` object and return the value.
    #
    # If the `Option` tests `false` this will throw an exception.
    def __call__() -> T: ...

    # Boolean conversion.
    def __convert__() -> Bool: ...

