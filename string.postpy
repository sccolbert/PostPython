#------------------------------------------------------------------------------
# POSTPython String Module
#
#
#------------------------------------------------------------------------------
from .byte import Byte
from .iterable import Iterable
from .numbers import Int64
from .sequence import Sequence


# The builtin `String` type.
#
# A `String` is nothing more than an immutable sequence of `Byte`. The only
# functionality provided by the core class is iteration and concatenation.
#
# All other functionality is provided by libraries, which understand the
# distinction between bytes and UTF-8 encoding.
#
# When a `String` is used to hold textual data, that data shall be encoded
# in `UTF-8`. String literals in POSTPython source code are UTF-8 encoded.
# All standard library functions assume and operate on this principle.
#
# Therefore, the `String` class implicitly supports Unicode by way of the
# `UTF-8` encoding. It also degrades gracefully to C-strings under the hood.
#
# The runtime libraries automatically handle the conversion between platform
# encoding and UTF-8, so user code should not have to worry about this for
# most use cases.
class String:

    # The length of the string, in number of bytes.
    #
    # This is always `>= 0`.
    const length: Int64

    # Default constructor.
    #
    # Creates an empty string.
    def __init__(): ...

    # Copy constructor.
    #
    # The new string has internal memory populated by the other object.
    def __init__(other: Byte): ...
    def __init__(other: Sequence[Byte]): ...
    def __init__(other: Iterable[Byte]): ...
    def __init__(other: String): ...
    def __init__(other: Sequence[String]): ...
    def __init__(other: Iterable[String]): ...

    # Get the byte at the specified index in the string.
    #
    # Negative indexing wraps around from the end of the string.
    #
    # Indexing out-of-bounds is implementation-defined.
    def __getitem__(index: Int64) -> Byte: ...

    # Get a slice of the string.
    #
    # This method mimics the behavior of Python and will not fail due to
    # indices in the slice being out-of-bounds. It returns a new string
    # based on a "best effort" approach.
    def __getitem__(slice: Slice) -> String: ...

    # Concatenate this string with another `Byte` or `String`.
    #
    # The implementation may choose the most efficient means to accomplish
    # this operation, subject to the guarantees of the API.
    def __add__(other: Byte) -> String: ...
    def __add__(other: Sequence[Byte]) -> String: ...
    def __add__(other: Iterable[Byte]) -> String: ...
    def __add__(other: String) -> String: ...
    def __add__(other: Sequence[String]) -> String: ...
    def __add__(other: Iterable[String]) -> String: ...

