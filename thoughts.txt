

General Thoughts:

Varibles:
  - Variables must be initialized with an assignment statement that includes
    a type, even if that type is `auto`. eg. `foo: auto = some_expr()`

  - Variables cannot be redefined or change their type, but they can be
    reassigned to a value of the same type.

  - Name shadowing: still thinking thru this...


Objects declared with `type` are value types. They are always allocated on
the stack or within the allocated space of another object. Just like a number,
they are immutable once initialized (which must happen fully by a constructor).
This means that internally they can be efficiently passed by reference to
functions, but the function cannot mutate them or their fields. They can also
be efficiently assigned by reference, since they cannot be mutated.

Objects declared with `class` are reference types. They are always allocated
on the heap. They have the same semantics as `C` pointers in that they are
passed by reference and assigned by reference. Reference types are subject
to garbage collection. Reference types may hold value types as fields. These
value-type fields can be assigned, but only to a derived-copy of the original
type. The type object itself is still immutable.

`self` is implicit in method bodies. This may seem to violate the rule that
"explicit is better than implicit", but this is less typing for everyone
and the alternative is to have the runtime "implicitly" pass `self` as the
first argument to all methods, which is not "explicit" at all.

We will have exceptions, but only for exceptional circumstances. We will
avoid using exceptions for control flow.

Objects of `type` and `class` are nominally typed. If code expects a
nominal type, it will only receive that nominal type. "duck-typing" one
nominal type to fit another nominal type is not allowed. Use `protocol` 
types for "duck-typing". A "nominal" type can fit a "protocol" type, but
not vice-versa".

A `protocol` type is any object that *structurally* meets the definition of
a `protocol`. Think of this as "explicit" duck-typing, or an interface. This
will necessarily be slower in-use than nominal types, due the boxing and/or
virtualization that may be required. Protocols cannot be "subclassed".

Thinking about not supporting subclassing at all, and using protocols for
all "virtualization". This is easier to implement and leads to more explicit
code. It also aligns with Rust and Go, which are the current rage. Also
easier to optimize since the structure of "nominal" types is known ahead
of time. Also maps better to C. Also easier to teach: value types are just
that. Class types are references, with no virtualization. Protocols then
become the "one-way" to handle virtualization. The more I think about this,
the better the idea becomes. It's not "pythonic", but having worked on a
production 4+M line codebase of Python, this would prevent a lot of problems
at scale.

"Dunder" methods are used to support the language syntax and runtime. They
are not callable outside of the runtime. This is compiler-enforced.

"Leading-underscore" names are private to the nominal `type` or `class`.

At the module level, "Leading-underscore" names are private to the module
and cannot be exported.

Upon reading up more about the problems with "finalizers" in a managed
GC environment, and seeing the less-than-elegant solution that the new
JS `dispose` spec is implementing. I think I'm gonna stick with the Python
`with` context managers for cleanup, and not explicitly expose any finalizer. 
That will make implementation much easier, and cleanup much more explicit.

`readonly` attributes. Current thoughts are that they are `readonly` by
code which "consumes" the type or class. They can be modified by the
type or class itself, but not by subclasses. `const` attributes are constant
and can never be changed after initialization, by anything. Note that a
`const` attribute can decay to `readonly` to meet a protocol.

Addenda to the above, it might be better to have protocols *only* have 
methods. The "one true way" to do things. This may remove the need to have
the concept of "const" or "readonly" variables/fields entirely. It might be
enough to simply have private fields, and objects export their functionality
entirely through methods.


Questions:

- Implicit default constructors?

- Syntax for lists, dicts, sets, and their underlying types? I don't like
  the Python `list` API because it is not symmetric. We have an opportunity
  to have better APIs for the builtin syntactic types. I'm thinking that
  the syntax should support only fixed-size objects. For example, the
  tuple sytax is a fixed-size allocation. I'm thinking of using the "list"
  syntax to create a mutable-but-fixed-size builtin "array" object, akin
  to a C++ array. Variable size collections would all be libraries that are
  implemented the "standard library", ala "Vector", "Dict", "Set", etc...

- Builtin string type. Will be UTF-8, but Unicode aware?

