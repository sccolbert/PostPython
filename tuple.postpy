#------------------------------------------------------------------------------
# POSTPython Tuple Module
#
#
#------------------------------------------------------------------------------
from .iterable import Iterable
from .numbers import Int64
from .sequence import Sequence
from .slice import Slice


# The builtin `Tuple` type.
#
# A tuple is a fixed-size immutable collection of values.
#
# Corresponds to the `(a, b, c)` literal syntax.
#
# A `Tuple` is a value type, but its internal buffer is a reference type.
type Tuple[T]:

    # The length of the tuple, in number of elements.
    const length: Int64

    # Default constructor.
    def __init__(): ...

    # Sequence constructor.
    #
    # The new tuple has a new internal buffer populated by the sequence.
    def __init__(other: Sequence[T]): ...

    # Iterable constructor.
    #
    # The new tuple has a new internal buffer populated by the iterable.
    def __init__(other: Iterable[T]): ...

    # Copy constructor.
    #
    # The new tuple shares the internal buffer with the other tuple.
    def __init__(other: Tuple[T]): ...

    # Get the item at the specified index in the tuple.
    #
    # Negative indexing wraps around from the end of the tuple.
    #
    # Indexing out-of-bounds is implementation-defined.
    def __getitem__(index: Int64) -> T: ...

    # Get a slice of the tuple.
    #
    # This method mimics the behavior of Python and will not fail due to
    # indices in the slice being out-of-bounds. It returns a new tuple
    # based on a "best effort" approach.
    #
    # If the slice encompasses the entire tuple in the same order, no
    # new allocations will be performed. Otherwise, the new tuple will
    # contain a newly allocated internal buffer.
    def __getitem__(slice: Slice) -> Tuple[T]: ...

