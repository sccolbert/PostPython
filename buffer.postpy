#------------------------------------------------------------------------------
# POSTPython Buffer Module
#
#
#------------------------------------------------------------------------------
from .iterable import Iterable
from .numbers import Int64
from .sequence import Sequence
from .slice import Slice


# The builtin managed heap memory allocator for PostPython.
#
# Most user code will not interact with a `Buffer` directly. Instead, it
# will use one of the higher-level container types. This class primarily
# exists for the implementation of those higher-level types.
#
# With the correct compiler flags, a `Buffer` will perform bounds-checking,
# so it is generally not necessary for containers to perform their own.
class Buffer[T]:

    # Construct a buffer with the given `capacity`.
    #
    # The initial `length` of the buffer will be `0`.
    def __init__(capcity: Int64): ...

    # Copy constructor.
    #
    # The new buffer has internal memory populated by the other object.
    #
    # The `capacity` of the new buffer will equal its `length`.
    def __init__(other: Buffer[T]): ...
    def __init__(other: Sequence[T]): ...
    def __init__(other: Iterable[T]): ...

    # The length of the buffer in number of `T` elements.
    #
    # The `len` is number of valid elements in the buffer.
    #
    # The buffer `len` will grow up to `capacity` as elements are assigned
    # to `index == length` at which point it will cease to grow.
    #
    # It is not possible to create "gaps" in the buffer with uninitialized
    # values.
    #
    # This is always `>= 0` and `<= capacity`.
    def __len__() -> Int64 ->: ...

    # Get the element at the specified buffer index.
    #
    # Negative indices wrap around at the end of the buffer.
    #
    # Compiler flags control bounds-checking of this access.
    def __getitem__(index: Int64) -> T: ...

    # Get a slice of the buffer.
    #
    # This method mimics the behavior of Python and will not fail due to
    # indices in the slice being out-of-bounds. It returns a new buffer
    # based on a "best effort" approach.
    def __getitem__(slice: Slice) -> Buffer[T]: ...

    # Set the element at the specified buffer index.
    #
    # Negative indices wrap around at the end of the buffer.
    #
    # Compiler flags control bounds-checking of this access.
    def __setitem__(index: Int64, value: T): ...

    # Set a slice of the buffer from an object.
    #
    # This method mimics the behavior of `__getitem__(Slice)` and will not
    # fail based on out-of-bounds or out-of-length access. It operates on a
    # "best effort" approach.
    def __setitem__(slice: Slice, other: Buffer[T]): ...
    def __setitem__(slice: Slice, other: Sequence[T]): ...
    def __setitem__(slice: Slice, other: Iterable[T]): ...

    # The capacity of the buffer in number of `T` elements.
    #
    # This value is always `>= 0`.
    def capacity() -> Int64: ...

    # Trim the `length` of the buffer to the given new value.
    #
    # If the new length is `>= length` this is a no-op.
    #
    # If the new length is `< 0` that new length will be added to the
    # existing `length` to determine the final trim length.
    #
    # This method does not change the capacity of the buffer, nor does
    # it reallocate memory. But it *does* allow the GC to collect stale
    # values beyond the new `length`.
    def trim(length: Int64): ...

    # Resize the buffer to a new `capacity`.
    #
    # All current elements that are logically valid at the new `capacity`
    # will remain valid.
    #
    # Resizing the buffer smaller may reduce the `length` of the buffer,
    # in which case the stale elements will be subject to GC collection.
    def resize(capacity: Int64): ...

    # Move elements in the buffer.
    #
    # This moves `count` elements from the `src` index to the `dst` index
    # in a copy-overwrite fashion. Overlap is allowed and is well-handled.
    #
    # Negative indices wrap around at the end of the buffer.
    #
    # This may increase the `length` of the buffer but will not change
    # its `capacity`.
    #
    # In no case will gaps be allowed to appear in the buffer.
    #
    # This method is *always* internally bounds-checked.
    def move(src: Int64, dst: Int64, count: Int64): ...

