#------------------------------------------------------------------------------
# POSTPython Array Module
#
#
#------------------------------------------------------------------------------
from .iterable import Iterable
from .numbers import Int64
from .sequence import Sequence
from .slice import Slice


# The builtin `Array` type.
#
# An array is a fixed-size mutable collection of values.
#
# Corresponds to the `[a, b, c]` literal syntax.
#
# An `Array` is a value type, but its internal buffer is a reference type.
type Array[T]:

    # The length of the array, in number of elements.
    #
    # This is always `>= 0`.
    const length: Int64

    # Default constructor.
    def __init__(): ...

    # Copy constructor.
    #
    # The new array has a new internal buffer populated by the array.
    def __init__(other: Array[T]): ...

    # Sequence constructor.
    #
    # The new array has a new internal buffer populated by the sequence.
    def __init__(other: Sequence[T]): ...

    # Iterable constructor.
    #
    # The new array has a new internal buffer populated by the iterable.
    def __init__(other: Iterable[T]): ...

    # Get the item at the specified index in the array.
    #
    # Negative indexing wraps around from the end of the array.
    #
    # Indexing out-of-bounds is implementation-defined.
    def __getitem__(index: Int64) -> T: ...

    # Get a slice of the array.
    #
    # This method mimics the behavior of Python and will not fail due to
    # indices in the slice being out-of-bounds. It returns a new array
    # based on a "best effort" approach.
    #
    # The new array will always contain a newly allocated internal buffer.
    def __getitem__(slice: Slice) -> Array[T]: ...

    # Set the item at the specified index in the array.
    #
    # Negative indexing wraps around from the end of the array.
    #
    # Indexing out-of-bounds is implementation-defined.
    def __setitem__(index: Int64, value: T): ...

