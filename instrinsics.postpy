
#-----------------------------------------------------------------------------
# The None Type
#-----------------------------------------------------------------------------

# The singleton None type. Denoted by the keyword `None`.
type None


#-----------------------------------------------------------------------------
# The Boolean Type
#-----------------------------------------------------------------------------

# The boolean type. Denoted by the keywords `true` or `false`.
type Bool


#-----------------------------------------------------------------------------
# Intrinsic Byte Type
#-----------------------------------------------------------------------------

# A single 8-bit byte
type Byte


# ----------------------------------------------------------------------------
# Intrinsic Unsigned Integer Types
#-----------------------------------------------------------------------------

# Unsigned 8-bit integer
type Uint8

# Unsigned 16-bit integer
type Uint16

# Unsigned 32-bit integer
type Uint32

# Unsigned 64-bit integer
type Uint64

# Unsigned 128-bit integer
type Uint128


#-----------------------------------------------------------------------------
# Intrinsic Signed Integer Types
#-----------------------------------------------------------------------------

# Signed 8-bit integer
type Int8

# Signed 16-bit integer
type Int16

# Signed 32-bit integer
type Int32

# Signed 64-bit integer
type Int64

# Signed 128-bit integer
type Int128


#-----------------------------------------------------------------------------
# Intrinsic Floating Point Types
#-----------------------------------------------------------------------------

# IEE-754 32bit floating point
type Float32

# IEE-754 64bit floating point
type Float64

# IEE-754 128bit floating point
type Float128


#-----------------------------------------------------------------------------
# Intrinsic Complex Types
#-----------------------------------------------------------------------------

# 32bit complex type
type Complex32:

	# The real component of the complex type.
	readonly real: Float32

	# The imaginary component of the complex type.
	readonly imag: Float32


# 64bit complex type
type Complex64:

	# The real component of the complex type.
	readonly real: Float64

	# The imaginary component of the complex type.
	readonly imag: Float64


# 128bit complex type
type Complex128:

	# The real component of the complex type.
	readonly real: Float128

	# The imaginary component of the complex type.
	readonly imag: Float128


#-----------------------------------------------------------------------------
# Intrinsic Type Union
#-----------------------------------------------------------------------------

# A Union Type of all Intrinsic Compiler types.
#
# These are the fundamental data types that the compiler understands. All other 
# behaviors (except `Memory`) are implemented by user-defined types/classes.
type IntrinsicType = (
	None        |
	bool        |
	Byte        |
	Int8        |
	Int16       |
	Int32       |
	Int64       |
	Int128      |
	Uint8       |
	Uint16      |
	Uint32      |
	Uint64      |
	Uint128     |
	Float32     |
	Float64     |
	Float128    |
	Complex32   |
	Complex64   |
	Complex128
)


#-----------------------------------------------------------------------------
# Memory Type
#-----------------------------------------------------------------------------

# The core size-aware memory type for heap allocation.
#
# Note that the size of the underlying device buffer in bytes is "at least" 
# large enough to hold `n = length` elements, but it may be greater.
type Memory[T is IntrinsicType]:

	# The length of the memory buffer in number of `T` elements.
	#
	# This value is `readonly` and cannot be changed by the user.
	readonly length: Uint64

	# Construct a `Memory` object to hold `length` elements of the given type.
	#
	# If the allocation fails, an exception will be raised.
	#
	# All elements of the buffer will be initialized to `zero` in memory.
	def __init__(self, length: Uint64):
		pass

	# Get the element at the specified buffer index.
	#
	# Indexing out-of-bounds is undefined or implementation-specific behavior.
	def __getitem__(self, index: Uint64) -> T:
		pass

	# Set the element at the specified buffer index.
	#
	# Indexing out-of-bounds is undefined or implementation-specific behavior.
	def __setitem__(self, index: Uint64, value: T) -> None:
		pass

	# Resize the `Memory` object to hold "at least" `length` elements.
	#
	# Note, the behavior of this method is implementation-dependent. An 
	# implementation may move the memory buffer pointer, or it may not. 
	# It may copy memory, or it may not.
	#
	# Guarantees from the implentation on success are as follows:
	# - If resizing larger, all new elements are initialized to zero.
	# - If resizing smaller, all dead elements are freed.
	# - If moving the buffer pointer, all valid elements are copied.
	#
	# The `resize` operation is not thread-safe unless otherwise specified
	# by an implementation.
	#
	# If this operation fails, an exception will be raised.
	def resize(self, length: Uint64):
		pass

	# Free the device memory owned by this object.
	#
	# After this call, the `Memory` object is invalid and accessing it after
	# this call is undefined behvior, or implementation-specific.
	#
	# Guarantees from the implementation are as follows:
	# - The entire memory buffer will be over-written with `zero`.
	#
	# Whether this function fails (i.e. double-free) is specific to the
	# implementation. Should it fail, an exception will be raised.
	def free(self):
		pass
